
{$REGION 'Copyright (C) CMC Development Team'}
{ **************************************************************************
  Copyright (C) 2015 CMC Development Team

  CMC is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 2 of the License, or
  (at your option) any later version.

  CMC is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with CMC. If not, see <http://www.gnu.org/licenses/>.

  Commercial use of this header files is prohibited. Especially the
  use by Embarcadero.

  ************************************************************************** }

{ **************************************************************************
  Additional Copyright (C) for this modul:

  Copyright (c) Microsoft Corporation.  All rights reserved.
  File name:  D3D12.h
  Header Version: 10.0.10075.0

  ************************************************************************** }
{$ENDREGION}
{$REGION 'Notes'}
{ **************************************************************************
  Use the DirectX libaries from CMC. They are NOT based on the JSB headers !

  Version 0.9 2015.06.04 - First release
  ************************************************************************** }

unit DX12.D3D12;

{$IFDEF FPC}
{$mode delphi}
{$ENDIF}

interface

{$Z4}

uses
    Windows, Classes, SysUtils, DX12.DXGI, DX12.D3DCommon;
	
const
		D3D12_DLL ='D3D12.dll';

const
    IID_ID3D12Object: TGUID = '{c4fec28f-7966-4e95-9f94-f431cb56c3b8}';
    IID_ID3D12DeviceChild: TGUID = '{905db94b-a00c-4140-9df5-2b64ca9ea357}';
    IID_ID3D12RootSignature: TGUID = '{c54a6b66-72df-4ee8-8be5-a946a1429214}';
    IID_ID3D12RootSignatureDeserializer: TGUID = '{34AB647B-3CC8-46AC-841B-C0965645C046}';
    IID_ID3D12Pageable: TGUID = '{63ee58fb-1268-4835-86da-f008ce62f0d6}';
    IID_ID3D12Heap: TGUID = '{6b3b2502-6e51-45b3-90ee-9884265e8df3}';
    IID_ID3D12Resource: TGUID = '{696442be-a72e-4059-bc79-5b5c98040fad}';
    IID_ID3D12CommandAllocator: TGUID = '{6102dee4-af59-4b09-b999-b44d73f09b24}';
    IID_ID3D12Fence: TGUID = '{0a753dcf-c4d8-4b91-adf6-be5a60d95a76}';
    IID_ID3D12PipelineState: TGUID = '{765a30f3-f624-4c6f-a828-ace948622445}';
    IID_ID3D12DescriptorHeap: TGUID = '{8efb471d-616c-4f49-90f7-127bb763fa51}';
    IID_ID3D12QueryHeap: TGUID = '{0d9658ae-ed45-469e-a61d-970ec583cab4}';
    IID_ID3D12CommandSignature: TGUID = '{c36a797c-ec80-4f0a-8985-a7b2475082d1}';
    IID_ID3D12CommandList: TGUID = '{7116d91c-e7e4-47ce-b8c6-ec8168f437e5}';
    IID_ID3D12GraphicsCommandList: TGUID = '{5b160d0f-ac1b-4185-8ba8-b3ae42a5a455}';
    IID_ID3D12CommandQueue: TGUID = '{0ec870a6-5d7e-4c22-8cfc-5baae07616ed}';
    IID_ID3D12Device: TGUID = '{189819f1-1db6-4b57-be54-1821339b85f7}';


const
    D3D12_16BIT_INDEX_STRIP_CUT_VALUE = $ffff;
    D3D12_32BIT_INDEX_STRIP_CUT_VALUE = $ffffffff;
    D3D12_8BIT_INDEX_STRIP_CUT_VALUE = $ff;
    D3D12_APPEND_ALIGNED_ELEMENT = $ffffffff;
    D3D12_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = 9;
    D3D12_CLIP_OR_CULL_DISTANCE_COUNT = 8;
    D3D12_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = 2;
    D3D12_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = 14;
    D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = 4;
    D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = 32;
    D3D12_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = 15;
    D3D12_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT = 16;
    D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
    D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = 15;
    D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
    D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
    D3D12_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = 64;
    D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
    D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = 1;
    D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
    D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
    D3D12_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = 32;
    D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = 1;
    D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = 128;
    D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = 1;
    D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = 1;
    D3D12_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = 128;
    D3D12_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = 1;
    D3D12_COMMONSHADER_SAMPLER_REGISTER_COUNT = 16;
    D3D12_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = 1;
    D3D12_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = 1;
    D3D12_COMMONSHADER_SAMPLER_SLOT_COUNT = 16;
    D3D12_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = 32;
    D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENTS = 4;
    D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = 32;
    D3D12_COMMONSHADER_TEMP_REGISTER_COUNT = 4096;
    D3D12_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = 3;
    D3D12_COMMONSHADER_TEMP_REGISTER_READ_PORTS = 3;
    D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = 10;
    D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = -10;
    D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = -8;
    D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = 7;
    D3D12_CONSTANT_BUFFER_DATA_PLACEMENT_ALIGNMENT = 256;
    D3D12_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 256;
    D3D12_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP = 64;
    D3D12_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 240;
    D3D12_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP = 68;
    D3D12_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 224;
    D3D12_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP = 72;
    D3D12_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 208;
    D3D12_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP = 76;
    D3D12_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 192;
    D3D12_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP = 84;
    D3D12_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 176;
    D3D12_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP = 92;
    D3D12_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 160;
    D3D12_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP = 100;
    D3D12_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 144;
    D3D12_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP = 112;
    D3D12_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 128;
    D3D12_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP = 128;
    D3D12_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 112;
    D3D12_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP = 144;
    D3D12_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 96;
    D3D12_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP = 168;
    D3D12_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 80;
    D3D12_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP = 204;
    D3D12_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 64;
    D3D12_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP = 256;
    D3D12_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 48;
    D3D12_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP = 340;
    D3D12_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 32;
    D3D12_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP = 512;
    D3D12_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 16;
    D3D12_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP = 768;
    D3D12_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION = 1;
    D3D12_CS_4_X_RAW_UAV_BYTE_ALIGNMENT = 256;
    D3D12_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP = 768;
    D3D12_CS_4_X_THREAD_GROUP_MAX_X = 768;
    D3D12_CS_4_X_THREAD_GROUP_MAX_Y = 768;
    D3D12_CS_4_X_UAV_REGISTER_COUNT = 1;
    D3D12_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION = 65535;
    D3D12_CS_TGSM_REGISTER_COUNT = 8192;
    D3D12_CS_TGSM_REGISTER_READS_PER_INST = 1;
    D3D12_CS_TGSM_RESOURCE_REGISTER_COMPONENTS = 1;
    D3D12_CS_TGSM_RESOURCE_REGISTER_READ_PORTS = 1;
    D3D12_CS_THREADGROUPID_REGISTER_COMPONENTS = 3;
    D3D12_CS_THREADGROUPID_REGISTER_COUNT = 1;
    D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS = 1;
    D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT = 1;
    D3D12_CS_THREADIDINGROUP_REGISTER_COMPONENTS = 3;
    D3D12_CS_THREADIDINGROUP_REGISTER_COUNT = 1;
    D3D12_CS_THREADID_REGISTER_COMPONENTS = 3;
    D3D12_CS_THREADID_REGISTER_COUNT = 1;
    D3D12_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP = 1024;
    D3D12_CS_THREAD_GROUP_MAX_X = 1024;
    D3D12_CS_THREAD_GROUP_MAX_Y = 1024;
    D3D12_CS_THREAD_GROUP_MAX_Z = 64;
    D3D12_CS_THREAD_GROUP_MIN_X = 1;
    D3D12_CS_THREAD_GROUP_MIN_Y = 1;
    D3D12_CS_THREAD_GROUP_MIN_Z = 1;
    D3D12_CS_THREAD_LOCAL_TEMP_REGISTER_POOL = 16384;
    D3D12_DEFAULT_BLEND_FACTOR_ALPHA = 1.0;
    D3D12_DEFAULT_BLEND_FACTOR_BLUE = 1.0;
    D3D12_DEFAULT_BLEND_FACTOR_GREEN = 1.0;
    D3D12_DEFAULT_BLEND_FACTOR_RED = 1.0;
    D3D12_DEFAULT_BORDER_COLOR_COMPONENT = 0.0;
    D3D12_DEFAULT_DEPTH_BIAS = 0;
    D3D12_DEFAULT_DEPTH_BIAS_CLAMP = 0.0;
    D3D12_DEFAULT_MAX_ANISOTROPY = 16;
    D3D12_DEFAULT_MIP_LOD_BIAS = 0.0;
    D3D12_DEFAULT_MSAA_RESOURCE_PLACEMENT_ALIGNMENT = 4194304;
    D3D12_DEFAULT_RENDER_TARGET_ARRAY_INDEX = 0;
    D3D12_DEFAULT_RESOURCE_PLACEMENT_ALIGNMENT = 65536;
    D3D12_DEFAULT_SAMPLE_MASK = $ffffffff;
    D3D12_DEFAULT_SCISSOR_ENDX = 0;
    D3D12_DEFAULT_SCISSOR_ENDY = 0;
    D3D12_DEFAULT_SCISSOR_STARTX = 0;
    D3D12_DEFAULT_SCISSOR_STARTY = 0;
    D3D12_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = 0.0;
    D3D12_DEFAULT_STENCIL_READ_MASK = $ff;
    D3D12_DEFAULT_STENCIL_REFERENCE = 0;
    D3D12_DEFAULT_STENCIL_WRITE_MASK = $ff;
    D3D12_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = 0;
    D3D12_DEFAULT_VIEWPORT_HEIGHT = 0;
    D3D12_DEFAULT_VIEWPORT_MAX_DEPTH = 0.0;
    D3D12_DEFAULT_VIEWPORT_MIN_DEPTH = 0.0;
    D3D12_DEFAULT_VIEWPORT_TOPLEFTX = 0;
    D3D12_DEFAULT_VIEWPORT_TOPLEFTY = 0;
    D3D12_DEFAULT_VIEWPORT_WIDTH = 0;
    D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND = $ffffffff;
    D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_END = $fffffff7;
    D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_START = $fffffff0;
    D3D12_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968;
    D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS = 4;
    D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
    D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COUNT = 32;
    D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST = 2;
    D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS = 1;
    D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS = 3;
    D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
    D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT = 1;
    D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST = 2;
    D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS = 1;
    D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4;
    D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32;
    D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT = 32;
    D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2;
    D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1;
    D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1;
    D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
    D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1;
    D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2;
    D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1;
    D3D12_DS_OUTPUT_REGISTER_COMPONENTS = 4;
    D3D12_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
    D3D12_DS_OUTPUT_REGISTER_COUNT = 32;
    D3D12_FLOAT16_FUSED_TOLERANCE_IN_ULP = 0.6;
    D3D12_FLOAT32_MAX = 3.402823466e+38;
    D3D12_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = 0.6;
    D3D12_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = 2.4;
    D3D12_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = 1.0;
    D3D12_FLOAT_TO_SRGB_OFFSET = 0.055;
    D3D12_FLOAT_TO_SRGB_SCALE_1 = 12.92;
    D3D12_FLOAT_TO_SRGB_SCALE_2 = 1.055;
    D3D12_FLOAT_TO_SRGB_THRESHOLD = 0.0031308;
    D3D12_FTOI_INSTRUCTION_MAX_INPUT = 2147483647.999;
    D3D12_FTOI_INSTRUCTION_MIN_INPUT = -2147483648.999;
    D3D12_FTOU_INSTRUCTION_MAX_INPUT = 4294967295.999;
    D3D12_FTOU_INSTRUCTION_MIN_INPUT = 0.0;
    D3D12_GS_INPUT_INSTANCE_ID_READS_PER_INST = 2;
    D3D12_GS_INPUT_INSTANCE_ID_READ_PORTS = 1;
    D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS = 1;
    D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
    D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COUNT = 1;
    D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = 1;
    D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = 32;
    D3D12_GS_INPUT_PRIM_CONST_REGISTER_COUNT = 1;
    D3D12_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = 2;
    D3D12_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = 1;
    D3D12_GS_INPUT_REGISTER_COMPONENTS = 4;
    D3D12_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
    D3D12_GS_INPUT_REGISTER_COUNT = 32;
    D3D12_GS_INPUT_REGISTER_READS_PER_INST = 2;
    D3D12_GS_INPUT_REGISTER_READ_PORTS = 1;
    D3D12_GS_INPUT_REGISTER_VERTICES = 32;
    D3D12_GS_MAX_INSTANCE_COUNT = 32;
    D3D12_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES = 1024;
    D3D12_GS_OUTPUT_ELEMENTS = 32;
    D3D12_GS_OUTPUT_REGISTER_COMPONENTS = 4;
    D3D12_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
    D3D12_GS_OUTPUT_REGISTER_COUNT = 32;
    D3D12_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT = 32;
    D3D12_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT = 32;
    D3D12_HS_CONTROL_POINT_REGISTER_COMPONENTS = 4;
    D3D12_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
    D3D12_HS_CONTROL_POINT_REGISTER_READS_PER_INST = 2;
    D3D12_HS_CONTROL_POINT_REGISTER_READ_PORTS = 1;
    D3D12_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND = $ffffffff;
    D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS = 1;
    D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
    D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT = 1;
    D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST = 2;
    D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS = 1;
    D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS = 1;
    D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
    D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT = 1;
    D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST = 2;
    D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS = 1;
    D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1;
    D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
    D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1;
    D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2;
    D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1;
    D3D12_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND = $ffffffff;
    D3D12_HS_MAXTESSFACTOR_LOWER_BOUND = 1.0;
    D3D12_HS_MAXTESSFACTOR_UPPER_BOUND = 64.0;
    D3D12_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968;
    D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS = 1;
    D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
    D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT = 1;
    D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST = 2;
    D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS = 1;
    D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4;
    D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32;
    D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT = 32;
    D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2;
    D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1;
    D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS = 128;
    D3D12_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = 0;
    D3D12_IA_DEFAULT_PRIMITIVE_TOPOLOGY = 0;
    D3D12_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = 0;
    D3D12_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = 1;
    D3D12_IA_INSTANCE_ID_BIT_COUNT = 32;
    D3D12_IA_INTEGER_ARITHMETIC_BIT_COUNT = 32;
    D3D12_IA_PATCH_MAX_CONTROL_POINT_COUNT = 32;
    D3D12_IA_PRIMITIVE_ID_BIT_COUNT = 32;
    D3D12_IA_VERTEX_ID_BIT_COUNT = 32;
    D3D12_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 32;
    D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 128;
    D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 32;
    D3D12_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = $ffffffff;
    D3D12_INTEGER_DIVIDE_BY_ZERO_REMAINDER = $ffffffff;
    D3D12_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL = $ffffffff;
    D3D12_KEEP_UNORDERED_ACCESS_VIEWS = $ffffffff;
    D3D12_LINEAR_GAMMA = 1.0;
    D3D12_MAJOR_VERSION = 12;
    D3D12_MAX_BORDER_COLOR_COMPONENT = 1.0;
    D3D12_MAX_DEPTH = 1.0;
    D3D12_MAX_LIVE_STATIC_SAMPLERS = 2032;
    D3D12_MAX_MAXANISOTROPY = 16;
    D3D12_MAX_MULTISAMPLE_SAMPLE_COUNT = 32;
    D3D12_MAX_POSITION_VALUE = 3.402823466e+34;
    D3D12_MAX_ROOT_COST = 64;
    D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_1 = 1000000;
    D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_2 = 1000000;
    D3D12_MAX_SHADER_VISIBLE_SAMPLER_HEAP_SIZE = 2048;
    D3D12_MAX_TEXTURE_DIMENSION_2_TO_EXP = 17;
    D3D12_MINOR_VERSION = 0;
    D3D12_MIN_BORDER_COLOR_COMPONENT = 0.0;
    D3D12_MIN_DEPTH = 0.0;
    D3D12_MIN_MAXANISOTROPY = 0;
    D3D12_MIP_LOD_BIAS_MAX = 15.99;
    D3D12_MIP_LOD_BIAS_MIN = -16.0;
    D3D12_MIP_LOD_FRACTIONAL_BIT_COUNT = 8;
    D3D12_MIP_LOD_RANGE_BIT_COUNT = 8;
    D3D12_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = 1.4;
    D3D12_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = 0;
    D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_END = $ffffffff;
    D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_START = $fffffff8;
    D3D12_PACKED_TILE = $ffffffff;
    D3D12_PIXEL_ADDRESS_RANGE_BIT_COUNT = 15;
    D3D12_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = 16;
    D3D12_PS_CS_UAV_REGISTER_COMPONENTS = 1;
    D3D12_PS_CS_UAV_REGISTER_COUNT = 8;
    D3D12_PS_CS_UAV_REGISTER_READS_PER_INST = 1;
    D3D12_PS_CS_UAV_REGISTER_READ_PORTS = 1;
    D3D12_PS_FRONTFACING_DEFAULT_VALUE = $ffffffff;
    D3D12_PS_FRONTFACING_FALSE_VALUE = 0;
    D3D12_PS_FRONTFACING_TRUE_VALUE = $ffffffff;
    D3D12_PS_INPUT_REGISTER_COMPONENTS = 4;
    D3D12_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
    D3D12_PS_INPUT_REGISTER_COUNT = 32;
    D3D12_PS_INPUT_REGISTER_READS_PER_INST = 2;
    D3D12_PS_INPUT_REGISTER_READ_PORTS = 1;
    D3D12_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0.0;
    D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = 1;
    D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = 32;
    D3D12_PS_OUTPUT_DEPTH_REGISTER_COUNT = 1;
    D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENTS = 1;
    D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = 32;
    D3D12_PS_OUTPUT_MASK_REGISTER_COUNT = 1;
    D3D12_PS_OUTPUT_REGISTER_COMPONENTS = 4;
    D3D12_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
    D3D12_PS_OUTPUT_REGISTER_COUNT = 8;
    D3D12_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0.5;
    D3D12_RAW_UAV_SRV_BYTE_ALIGNMENT = 16;
    D3D12_REQ_BLEND_OBJECT_COUNT_PER_DEVICE = 4096;
    D3D12_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = 27;
    D3D12_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
    D3D12_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE = 4096;
    D3D12_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 32;
    D3D12_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = 32;
    D3D12_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = 16384;
    D3D12_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = 1024;
    D3D12_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
    D3D12_REQ_MAXANISOTROPY = 16;
    D3D12_REQ_MIP_LEVELS = 15;
    D3D12_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = 2048;
    D3D12_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE = 4096;
    D3D12_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = 16384;
    D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM = 128;
    D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM = 0.25;
    D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM = 2048;
    D3D12_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP = 20;
    D3D12_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE = 4096;
    D3D12_REQ_SUBRESOURCES = 30720;
    D3D12_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = 2048;
    D3D12_REQ_TEXTURE1D_U_DIMENSION = 16384;
    D3D12_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = 2048;
    D3D12_REQ_TEXTURE2D_U_OR_V_DIMENSION = 16384;
    D3D12_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = 2048;
    D3D12_REQ_TEXTURECUBE_DIMENSION = 16384;
    D3D12_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = 0;
    D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES = $ffffffff;
    D3D12_SHADER_MAJOR_VERSION = 5;
    D3D12_SHADER_MAX_INSTANCES = 65535;
    D3D12_SHADER_MAX_INTERFACES = 253;
    D3D12_SHADER_MAX_INTERFACE_CALL_SITES = 4096;
    D3D12_SHADER_MAX_TYPES = 65535;
    D3D12_SHADER_MINOR_VERSION = 1;
    D3D12_SHIFT_INSTRUCTION_PAD_VALUE = 0;
    D3D12_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = 5;
    D3D12_SIMULTANEOUS_RENDER_TARGET_COUNT = 8;
    D3D12_SMALL_MSAA_RESOURCE_PLACEMENT_ALIGNMENT = 65536;
    D3D12_SMALL_RESOURCE_PLACEMENT_ALIGNMENT = 4096;
    D3D12_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048;
    D3D12_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 512;
    D3D12_SO_BUFFER_SLOT_COUNT = 4;
    D3D12_SO_DDI_REGISTER_INDEX_DENOTING_GAP = $ffffffff;
    D3D12_SO_NO_RASTERIZED_STREAM = $ffffffff;
    D3D12_SO_OUTPUT_COMPONENT_COUNT = 128;
    D3D12_SO_STREAM_COUNT = 4;
    D3D12_SPEC_DATE_DAY = 14;
    D3D12_SPEC_DATE_MONTH = 11;
    D3D12_SPEC_DATE_YEAR = 2014;
    D3D12_SPEC_VERSION = 1.16;
    D3D12_SRGB_GAMMA = 2.2;
    D3D12_SRGB_TO_FLOAT_DENOMINATOR_1 = 12.92;
    D3D12_SRGB_TO_FLOAT_DENOMINATOR_2 = 1.055;
    D3D12_SRGB_TO_FLOAT_EXPONENT = 2.4;
    D3D12_SRGB_TO_FLOAT_OFFSET = 0.055;
    D3D12_SRGB_TO_FLOAT_THRESHOLD = 0.04045;
    D3D12_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = 0.5;
    D3D12_STANDARD_COMPONENT_BIT_COUNT = 32;
    D3D12_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = 64;
    D3D12_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = 4;
    D3D12_STANDARD_PIXEL_COMPONENT_COUNT = 128;
    D3D12_STANDARD_PIXEL_ELEMENT_COUNT = 32;
    D3D12_STANDARD_VECTOR_SIZE = 4;
    D3D12_STANDARD_VERTEX_ELEMENT_COUNT = 32;
    D3D12_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = 64;
    D3D12_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8;
    D3D12_SUBTEXEL_FRACTIONAL_BIT_COUNT = 8;
    D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_END = $ffffffff;
    D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_START = $fffffff0;
    D3D12_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR = 64;
    D3D12_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR = 64;
    D3D12_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR = 63;
    D3D12_TESSELLATOR_MAX_TESSELLATION_FACTOR = 64;
    D3D12_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR = 2;
    D3D12_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR = 1;
    D3D12_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR = 1;
    D3D12_TEXEL_ADDRESS_RANGE_BIT_COUNT = 16;
    D3D12_TEXTURE_DATA_PITCH_ALIGNMENT = 256;
    D3D12_TEXTURE_DATA_PLACEMENT_ALIGNMENT = 512;
    D3D12_TILED_RESOURCE_TILE_SIZE_IN_BYTES = 65536;
    D3D12_UAV_COUNTER_PLACEMENT_ALIGNMENT = 4096;
    D3D12_UAV_SLOT_COUNT = 64;
    D3D12_UNBOUND_MEMORY_ACCESS_RESULT = 0;
    D3D12_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = 15;
    D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = 16;
    D3D12_VIEWPORT_BOUNDS_MAX = 32767;
    D3D12_VIEWPORT_BOUNDS_MIN = -32768;
    D3D12_VS_INPUT_REGISTER_COMPONENTS = 4;
    D3D12_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
    D3D12_VS_INPUT_REGISTER_COUNT = 32;
    D3D12_VS_INPUT_REGISTER_READS_PER_INST = 2;
    D3D12_VS_INPUT_REGISTER_READ_PORTS = 1;
    D3D12_VS_OUTPUT_REGISTER_COMPONENTS = 4;
    D3D12_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
    D3D12_VS_OUTPUT_REGISTER_COUNT = 32;
    D3D12_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = 10;
    D3D12_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 25;
    D3D12_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = 25;

const
    D3D12_SHADER_COMPONENT_MAPPING_MASK = $7;
    D3D12_SHADER_COMPONENT_MAPPING_SHIFT = 3;
    D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES = (1 shl (D3D12_SHADER_COMPONENT_MAPPING_SHIFT * 4));


    D3D12_FILTER_REDUCTION_TYPE_MASK = $3;
    D3D12_FILTER_REDUCTION_TYPE_SHIFT = 7;
    D3D12_FILTER_TYPE_MASK = $3;
    D3D12_MIN_FILTER_SHIFT = 4;
    D3D12_MAG_FILTER_SHIFT = 2;
    D3D12_MIP_FILTER_SHIFT = 0;
    D3D12_ANISOTROPIC_FILTERING_BIT = $40;

type
    TSingleArray4 = array [0..3] of single;
    TUINTArray4 = array [0..3] of UINT;

    PUINT64 = ^UINT64;

    TD3D12_GPU_VIRTUAL_ADDRESS = UINT64;

    PSECURITY_ATTRIBUTES = ^SECURITY_ATTRIBUTES; // Missing in Winapi.Windows or Windows;

    TD3D12_COMMAND_LIST_TYPE = (
        D3D12_COMMAND_LIST_TYPE_DIRECT = 0,
        D3D12_COMMAND_LIST_TYPE_BUNDLE = 1,
        D3D12_COMMAND_LIST_TYPE_COMPUTE = 2,
        D3D12_COMMAND_LIST_TYPE_COPY = 3
        );

    TD3D12_COMMAND_QUEUE_FLAGS = (
        D3D12_COMMAND_QUEUE_FLAG_NONE = 0,
        D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT = $1
        );

    TD3D12_COMMAND_QUEUE_PRIORITY = (
        D3D12_COMMAND_QUEUE_PRIORITY_NORMAL = 0,
        D3D12_COMMAND_QUEUE_PRIORITY_HIGH = 100
        );


    TD3D12_PRIMITIVE_TOPOLOGY_TYPE = (
        D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED = 0,
        D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT = 1,
        D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE = 2,
        D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE = 3,
        D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH = 4
        );

    TD3D12_INPUT_CLASSIFICATION = (
        D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA = 0,
        D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA = 1
        );


    TD3D12_COMMAND_QUEUE_DESC = record
        _Type: TD3D12_COMMAND_LIST_TYPE;
        Priority: INT32;
        Flags: TD3D12_COMMAND_QUEUE_FLAGS;
        NodeMask: UINT32;
    end;


    TD3D12_INPUT_ELEMENT_DESC = record
        SemanticName: PAnsiChar;
        SemanticIndex: UINT;
        Format: TDXGI_FORMAT;
        InputSlot: UINT;
        AlignedByteOffset: UINT;
        InputSlotClass: TD3D12_INPUT_CLASSIFICATION;
        InstanceDataStepRate: UINT;
    end;

    PD3D12_INPUT_ELEMENT_DESC = ^TD3D12_INPUT_ELEMENT_DESC;

    TD3D12_FILL_MODE = (
        D3D12_FILL_MODE_WIREFRAME = 2,
        D3D12_FILL_MODE_SOLID = 3
        );

    TD3D12_PRIMITIVE_TOPOLOGY = TD3D_PRIMITIVE_TOPOLOGY;

    TD3D12_PRIMITIVE = TD3D_PRIMITIVE;

    TD3D12_CULL_MODE = (
        D3D12_CULL_MODE_NONE = 1,
        D3D12_CULL_MODE_FRONT = 2,
        D3D12_CULL_MODE_BACK = 3
        );


    TD3D12_SO_DECLARATION_ENTRY = record
        Stream: UINT;
        SemanticName: PAnsiChar;
        SemanticIndex: UINT;
        StartComponent: byte;
        ComponentCount: byte;
        OutputSlot: byte;
    end;

    PD3D12_SO_DECLARATION_ENTRY = ^TD3D12_SO_DECLARATION_ENTRY;

    TD3D12_VIEWPORT = record
        TopLeftX: single;
        TopLeftY: single;
        Width: single;
        Height: single;
        MinDepth: single;
        MaxDepth: single;
    end;
    PD3D12_VIEWPORT = ^TD3D12_VIEWPORT;

    TD3D12_RECT = TRECT;
    PD3D12_RECT = ^TD3D12_RECT;

    TD3D12_BOX = record
        left: UINT;
        top: UINT;
        front: UINT;
        right: UINT;
        bottom: UINT;
        back: UINT;
    end;

    TD3D12_COMPARISON_FUNC = (
        D3D12_COMPARISON_FUNC_NEVER = 1,
        D3D12_COMPARISON_FUNC_LESS = 2,
        D3D12_COMPARISON_FUNC_EQUAL = 3,
        D3D12_COMPARISON_FUNC_LESS_EQUAL = 4,
        D3D12_COMPARISON_FUNC_GREATER = 5,
        D3D12_COMPARISON_FUNC_NOT_EQUAL = 6,
        D3D12_COMPARISON_FUNC_GREATER_EQUAL = 7,
        D3D12_COMPARISON_FUNC_ALWAYS = 8
        );

    TD3D12_DEPTH_WRITE_MASK = (
        D3D12_DEPTH_WRITE_MASK_ZERO = 0,
        D3D12_DEPTH_WRITE_MASK_ALL = 1
        );

    TD3D12_STENCIL_OP = (
        D3D12_STENCIL_OP_KEEP = 1,
        D3D12_STENCIL_OP_ZERO = 2,
        D3D12_STENCIL_OP_REPLACE = 3,
        D3D12_STENCIL_OP_INCR_SAT = 4,
        D3D12_STENCIL_OP_DECR_SAT = 5,
        D3D12_STENCIL_OP_INVERT = 6,
        D3D12_STENCIL_OP_INCR = 7,
        D3D12_STENCIL_OP_DECR = 8
        );

    TD3D12_DEPTH_STENCILOP_DESC = record
        StencilFailOp: TD3D12_STENCIL_OP;
        StencilDepthFailOp: TD3D12_STENCIL_OP;
        StencilPassOp: TD3D12_STENCIL_OP;
        StencilFunc: TD3D12_COMPARISON_FUNC;
    end;

    TD3D12_DEPTH_STENCIL_DESC = record

        DepthEnable: boolean;
        DepthWriteMask: TD3D12_DEPTH_WRITE_MASK;
        DepthFunc: TD3D12_COMPARISON_FUNC;
        StencilEnable: boolean;
        StencilReadMask: UINT8;
        StencilWriteMask: UINT8;
        FrontFace: TD3D12_DEPTH_STENCILOP_DESC;
        BackFace: TD3D12_DEPTH_STENCILOP_DESC;
    end;

    TD3D12_BLEND = (
        D3D12_BLEND_ZERO = 1,
        D3D12_BLEND_ONE = 2,
        D3D12_BLEND_SRC_COLOR = 3,
        D3D12_BLEND_INV_SRC_COLOR = 4,
        D3D12_BLEND_SRC_ALPHA = 5,
        D3D12_BLEND_INV_SRC_ALPHA = 6,
        D3D12_BLEND_DEST_ALPHA = 7,
        D3D12_BLEND_INV_DEST_ALPHA = 8,
        D3D12_BLEND_DEST_COLOR = 9,
        D3D12_BLEND_INV_DEST_COLOR = 10,
        D3D12_BLEND_SRC_ALPHA_SAT = 11,
        D3D12_BLEND_BLEND_FACTOR = 14,
        D3D12_BLEND_INV_BLEND_FACTOR = 15,
        D3D12_BLEND_SRC1_COLOR = 16,
        D3D12_BLEND_INV_SRC1_COLOR = 17,
        D3D12_BLEND_SRC1_ALPHA = 18,
        D3D12_BLEND_INV_SRC1_ALPHA = 19
        );

    TD3D12_BLEND_OP = (
        D3D12_BLEND_OP_ADD = 1,
        D3D12_BLEND_OP_SUBTRACT = 2,
        D3D12_BLEND_OP_REV_SUBTRACT = 3,
        D3D12_BLEND_OP_MIN = 4,
        D3D12_BLEND_OP_MAX = 5
        );

    TD3D12_COLOR_WRITE_ENABLE = (
        D3D12_COLOR_WRITE_ENABLE_RED = 1,
        D3D12_COLOR_WRITE_ENABLE_GREEN = 2,
        D3D12_COLOR_WRITE_ENABLE_BLUE = 4,
        D3D12_COLOR_WRITE_ENABLE_ALPHA = 8,
        D3D12_COLOR_WRITE_ENABLE_ALL = (Ord(D3D12_COLOR_WRITE_ENABLE_RED) or Ord(D3D12_COLOR_WRITE_ENABLE_GREEN) or
        Ord(D3D12_COLOR_WRITE_ENABLE_BLUE) or Ord(D3D12_COLOR_WRITE_ENABLE_ALPHA))
        );

    TD3D12_LOGIC_OP = (
        D3D12_LOGIC_OP_CLEAR = 0,
        D3D12_LOGIC_OP_SET = (D3D12_LOGIC_OP_CLEAR + 1),
        D3D12_LOGIC_OP_COPY = (D3D12_LOGIC_OP_SET + 1),
        D3D12_LOGIC_OP_COPY_INVERTED = (D3D12_LOGIC_OP_COPY + 1),
        D3D12_LOGIC_OP_NOOP = (D3D12_LOGIC_OP_COPY_INVERTED + 1),
        D3D12_LOGIC_OP_INVERT = (D3D12_LOGIC_OP_NOOP + 1),
        D3D12_LOGIC_OP_AND = (D3D12_LOGIC_OP_INVERT + 1),
        D3D12_LOGIC_OP_NAND = (D3D12_LOGIC_OP_AND + 1),
        D3D12_LOGIC_OP_OR = (D3D12_LOGIC_OP_NAND + 1),
        D3D12_LOGIC_OP_NOR = (D3D12_LOGIC_OP_OR + 1),
        D3D12_LOGIC_OP_XOR = (D3D12_LOGIC_OP_NOR + 1),
        D3D12_LOGIC_OP_EQUIV = (D3D12_LOGIC_OP_XOR + 1),
        D3D12_LOGIC_OP_AND_REVERSE = (D3D12_LOGIC_OP_EQUIV + 1),
        D3D12_LOGIC_OP_AND_INVERTED = (D3D12_LOGIC_OP_AND_REVERSE + 1),
        D3D12_LOGIC_OP_OR_REVERSE = (D3D12_LOGIC_OP_AND_INVERTED + 1),
        D3D12_LOGIC_OP_OR_INVERTED = (D3D12_LOGIC_OP_OR_REVERSE + 1)
        );

    TD3D12_RENDER_TARGET_BLEND_DESC = record
        BlendEnable: boolean;
        LogicOpEnable: boolean;
        SrcBlend: TD3D12_BLEND;
        DestBlend: TD3D12_BLEND;
        BlendOp: TD3D12_BLEND_OP;
        SrcBlendAlpha: TD3D12_BLEND;
        DestBlendAlpha: TD3D12_BLEND;
        BlendOpAlpha: TD3D12_BLEND_OP;
        LogicOp: TD3D12_LOGIC_OP;
        RenderTargetWriteMask: UINT8;
    end;

    TD3D12_BLEND_DESC = record
        AlphaToCoverageEnable: boolean;
        IndependentBlendEnable: boolean;
        RenderTarget: array [0..7] of TD3D12_RENDER_TARGET_BLEND_DESC;
    end;

    { Note, the array size for RenderTarget[] above is D3D12_SIMULTANEOUS_RENDERTARGET_COUNT.
       IDL processing/generation of this header replaces the define; this comment is merely explaining what happened. }
    TD3D12_CONSERVATIVE_RASTERIZATION_MODE = (
        D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF = 0,
        D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON = 1
        );

    TD3D12_RASTERIZER_DESC = record
        FillMode: TD3D12_FILL_MODE;
        CullMode: TD3D12_CULL_MODE;
        FrontCounterClockwise: boolean;
        DepthBias: INT32;
        DepthBiasClamp: single;
        SlopeScaledDepthBias: single;
        DepthClipEnable: boolean;
        MultisampleEnable: boolean;
        AntialiasedLineEnable: boolean;
        ForcedSampleCount: UINT;
        ConservativeRaster: TD3D12_CONSERVATIVE_RASTERIZATION_MODE;
    end;


    ID3D12Object = interface(IUnknown)
        ['{c4fec28f-7966-4e95-9f94-f431cb56c3b8}']
        function GetPrivateData(const riid: TGUID; var pDataSize: UINT; out pData: pointer): HResult; stdcall;
        function SetPrivateData(const riid: TGUID; DataSize: UINT; pData: Pointer): HResult; stdcall;
        function SetPrivateDataInterface(const riid: TGUID; pData: IUnknown): HResult; stdcall;
        function SetName(Name: PWideChar): HResult; stdcall;
    end;


    ID3D12DeviceChild = interface(ID3D12Object)
        ['{905db94b-a00c-4140-9df5-2b64ca9ea357}']
        function GetDevice(const riid: TGUID; out ppvDevice): HResult; stdcall;
    end;


    ID3D12RootSignature = interface(ID3D12DeviceChild)
        ['{c54a6b66-72df-4ee8-8be5-a946a1429214}']
    end;


    TD3D12_SHADER_BYTECODE = record
        pShaderBytecode: PByte;
        BytecodeLength: SIZE_T;
    end;

    TD3D12_STREAM_OUTPUT_DESC = record
        pSODeclaration: PD3D12_SO_DECLARATION_ENTRY;
        NumEntries: UINT;
        pBufferStrides: PUINT;
        NumStrides: UINT;
        RasterizedStream: UINT;
    end;

    TD3D12_INPUT_LAYOUT_DESC = record
        pInputElementDescs: PD3D12_INPUT_ELEMENT_DESC;
        NumElements: UINT;
    end;

    TD3D12_INDEX_BUFFER_STRIP_CUT_VALUE = (
        D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED = 0,
        D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF = 1,
        D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF = 2
        );

    TD3D12_CACHED_PIPELINE_STATE = record
        pCachedBlob: pointer;
        CachedBlobSizeInBytes: SIZE_T;
    end;

    TD3D12_PIPELINE_STATE_FLAGS = (
        D3D12_PIPELINE_STATE_FLAG_NONE = 0,
        D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG = $1
        );


    TD3D12_GRAPHICS_PIPELINE_STATE_DESC = record
        pRootSignature: ID3D12RootSignature;
        VS: TD3D12_SHADER_BYTECODE;
        PS: TD3D12_SHADER_BYTECODE;
        DS: TD3D12_SHADER_BYTECODE;
        HS: TD3D12_SHADER_BYTECODE;
        GS: TD3D12_SHADER_BYTECODE;
        StreamOutput: TD3D12_STREAM_OUTPUT_DESC;
        BlendState: TD3D12_BLEND_DESC;
        SampleMask: UINT;
        RasterizerState: TD3D12_RASTERIZER_DESC;
        DepthStencilState: TD3D12_DEPTH_STENCIL_DESC;
        InputLayout: TD3D12_INPUT_LAYOUT_DESC;
        IBStripCutValue: TD3D12_INDEX_BUFFER_STRIP_CUT_VALUE;
        PrimitiveTopologyType: TD3D12_PRIMITIVE_TOPOLOGY_TYPE;
        NumRenderTargets: UINT;
        RTVFormats: array [0..7] of TDXGI_FORMAT;
        DSVFormat: TDXGI_FORMAT;
        SampleDesc: TDXGI_SAMPLE_DESC;
        NodeMask: UINT;
        CachedPSO: TD3D12_CACHED_PIPELINE_STATE;
        Flags: TD3D12_PIPELINE_STATE_FLAGS;
    end;

    TD3D12_COMPUTE_PIPELINE_STATE_DESC = record
        pRootSignature: ID3D12RootSignature;
        CS: TD3D12_SHADER_BYTECODE;
        NodeMask: UINT;
        CachedPSO: TD3D12_CACHED_PIPELINE_STATE;
        Flags: TD3D12_PIPELINE_STATE_FLAGS;
    end;

    TD3D12_FEATURE = (
        D3D12_FEATURE_D3D12_OPTIONS = 0,
        D3D12_FEATURE_ARCHITECTURE = (D3D12_FEATURE_D3D12_OPTIONS + 1),
        D3D12_FEATURE_FEATURE_LEVELS = (D3D12_FEATURE_ARCHITECTURE + 1),
        D3D12_FEATURE_FORMAT_SUPPORT = (D3D12_FEATURE_FEATURE_LEVELS + 1),
        D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS = (D3D12_FEATURE_FORMAT_SUPPORT + 1),
        D3D12_FEATURE_FORMAT_INFO = (D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS + 1),
		D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT	= ( D3D12_FEATURE_FORMAT_INFO + 1 ) 
        );

    TD3D12_SHADER_MIN_PRECISION_SUPPORT = (
        D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE = 0,
        D3D12_SHADER_MIN_PRECISION_SUPPORT_10_BIT = $1,
        D3D12_SHADER_MIN_PRECISION_SUPPORT_16_BIT = $2
        );


    TD3D12_TILED_RESOURCES_TIER = (
        D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED = 0,
        D3D12_TILED_RESOURCES_TIER_1 = 1,
        D3D12_TILED_RESOURCES_TIER_2 = 2,
        D3D12_TILED_RESOURCES_TIER_3 = 3
        );

    TD3D12_RESOURCE_BINDING_TIER = (
        D3D12_RESOURCE_BINDING_TIER_1 = 1,
        D3D12_RESOURCE_BINDING_TIER_2 = 2,
        D3D12_RESOURCE_BINDING_TIER_3 = 3
        );

    TD3D12_CONSERVATIVE_RASTERIZATION_TIER = (
        D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED = 0,
        D3D12_CONSERVATIVE_RASTERIZATION_TIER_1 = 1,
        D3D12_CONSERVATIVE_RASTERIZATION_TIER_2 = 2,
        D3D12_CONSERVATIVE_RASTERIZATION_TIER_3 = 3
        );

    TD3D12_FORMAT_SUPPORT1 = (
        D3D12_FORMAT_SUPPORT1_NONE = 0,
        D3D12_FORMAT_SUPPORT1_BUFFER = $1,
        D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER = $2,
        D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER = $4,
        D3D12_FORMAT_SUPPORT1_SO_BUFFER = $8,
        D3D12_FORMAT_SUPPORT1_TEXTURE1D = $10,
        D3D12_FORMAT_SUPPORT1_TEXTURE2D = $20,
        D3D12_FORMAT_SUPPORT1_TEXTURE3D = $40,
        D3D12_FORMAT_SUPPORT1_TEXTURECUBE = $80,
        D3D12_FORMAT_SUPPORT1_SHADER_LOAD = $100,
        D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE = $200,
        D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON = $400,
        D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT = $800,
        D3D12_FORMAT_SUPPORT1_MIP = $1000,
        D3D12_FORMAT_SUPPORT1_RENDER_TARGET = $4000,
        D3D12_FORMAT_SUPPORT1_BLENDABLE = $8000,
        D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL = $10000,
        D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE = $40000,
        D3D12_FORMAT_SUPPORT1_DISPLAY = $80000,
        D3D12_FORMAT_SUPPORT1_CAST_WITHIN_BIT_LAYOUT = $100000,
        D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RENDERTARGET = $200000,
        D3D12_FORMAT_SUPPORT1_MULTISAMPLE_LOAD = $400000,
        D3D12_FORMAT_SUPPORT1_SHADER_GATHER = $800000,
        D3D12_FORMAT_SUPPORT1_BACK_BUFFER_CAST = $1000000,
        D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW = $2000000,
        D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON = $4000000,
        D3D12_FORMAT_SUPPORT1_DECODER_OUTPUT = $8000000,
        D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_OUTPUT = $10000000,
        D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_INPUT = $20000000,
        D3D12_FORMAT_SUPPORT1_VIDEO_ENCODER = $40000000
        );


    TD3D12_FORMAT_SUPPORT2 = (
        D3D12_FORMAT_SUPPORT2_NONE = 0,
        D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_ADD = $1,
        D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS = $2,
        D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = $4,
        D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE = $8,
        D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX = $10,
        D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = $20,
        D3D12_FORMAT_SUPPORT2_UAV_TYPED_LOAD = $40,
        D3D12_FORMAT_SUPPORT2_UAV_TYPED_STORE = $80,
        D3D12_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP = $100,
        D3D12_FORMAT_SUPPORT2_TILED = $200,
        D3D12_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY = $4000
        );


    TD3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS = (
        D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_NONE = 0,
        D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_TILED_RESOURCE = $1
        );


    TD3D12_CROSS_NODE_SHARING_TIER = (
        D3D12_CROSS_NODE_SHARING_TIER_NOT_SUPPORTED = 0,
        D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED = 1,
        D3D12_CROSS_NODE_SHARING_TIER_1 = 2,
        D3D12_CROSS_NODE_SHARING_TIER_2 = 3
        );

    TD3D12_RESOURCE_HEAP_TIER = (
        D3D12_RESOURCE_HEAP_TIER_1 = 1,
        D3D12_RESOURCE_HEAP_TIER_2 = 2
        );


    TD3D12_FEATURE_DATA_D3D12_OPTIONS = record
        DoublePrecisionFloatShaderOps: boolean;
        OutputMergerLogicOp: boolean;
        MinPrecisionSupport: TD3D12_SHADER_MIN_PRECISION_SUPPORT;
        TiledResourcesTier: TD3D12_TILED_RESOURCES_TIER;
        ResourceBindingTier: TD3D12_RESOURCE_BINDING_TIER;
        PSSpecifiedStencilRefSupported: boolean;
        TypedUAVLoadAdditionalFormats: boolean;
        ROVsSupported: boolean;
        ConservativeRasterizationTier: TD3D12_CONSERVATIVE_RASTERIZATION_TIER;
        MaxGPUVirtualAddressBitsPerResource: UINT;
        StandardSwizzle64KBSupported: boolean;
        CrossNodeSharingTier: TD3D12_CROSS_NODE_SHARING_TIER;
        CrossAdapterRowMajorTextureSupported: boolean;
        VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation: boolean;
        ResourceHeapTier: TD3D12_RESOURCE_HEAP_TIER;
    end;

    TD3D12_FEATURE_DATA_ARCHITECTURE = record
        NodeIndex: UINT;
        TileBasedRenderer: boolean;
        UMA: boolean;
        CacheCoherentUMA: boolean;
    end;

    TD3D12_FEATURE_DATA_FEATURE_LEVELS = record
        NumFeatureLevels: UINT;
        pFeatureLevelsRequested: PD3D_FEATURE_LEVEL;
        MaxSupportedFeatureLevel: TD3D_FEATURE_LEVEL;
    end;

    TD3D12_FEATURE_DATA_FORMAT_SUPPORT = record
        Format: TDXGI_FORMAT;
        Support1: TD3D12_FORMAT_SUPPORT1;
        Support2: TD3D12_FORMAT_SUPPORT2;
    end;

    TD3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS = record
        Format: TDXGI_FORMAT;
        SampleCount: UINT;
        Flags: TD3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS;
        NumQualityLevels: UINT;
    end;

    TD3D12_FEATURE_DATA_FORMAT_INFO = record
        Format: TDXGI_FORMAT;
        PlaneCount: UINT8;
    end;
	
	
TD3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT = record
     MaxGPUVirtualAddressBitsPerResource:UINT;
     MaxGPUVirtualAddressBitsPerProcess:UINT;
    end;
	PD3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT = ^TD3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT;

    TD3D12_RESOURCE_ALLOCATION_INFO = record
        SizeInBytes: UINT64;
        Alignment: UINT64;
    end;

    TD3D12_HEAP_TYPE = (
        D3D12_HEAP_TYPE_DEFAULT = 1,
        D3D12_HEAP_TYPE_UPLOAD = 2,
        D3D12_HEAP_TYPE_READBACK = 3,
        D3D12_HEAP_TYPE_CUSTOM = 4
        );

    TD3D12_CPU_PAGE_PROPERTY = (
        D3D12_CPU_PAGE_PROPERTY_UNKNOWN = 0,
        D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE = 1,
        D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE = 2,
        D3D12_CPU_PAGE_PROPERTY_WRITE_BACK = 3
        );

    TD3D12_MEMORY_POOL = (
        D3D12_MEMORY_POOL_UNKNOWN = 0,
        D3D12_MEMORY_POOL_L0 = 1,
        D3D12_MEMORY_POOL_L1 = 2
        );

    TD3D12_HEAP_PROPERTIES = record
        _Type: TD3D12_HEAP_TYPE;
        CPUPageProperty: TD3D12_CPU_PAGE_PROPERTY;
        MemoryPoolPreference: TD3D12_MEMORY_POOL;
        CreationNodeMask: UINT;
        VisibleNodeMask: UINT;
    end;

    TD3D12_HEAP_FLAGS = (
        D3D12_HEAP_FLAG_NONE = 0,
        D3D12_HEAP_FLAG_SHARED = $1,
        D3D12_HEAP_FLAG_DENY_BUFFERS = $4,
        D3D12_HEAP_FLAG_ALLOW_DISPLAY = $8,
        D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER = $20,
        D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES = $40,
        D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES = $80,
        D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES = 0,
        D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS = $c0,
        D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES = $44,
        D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES = $84
        );


    TD3D12_HEAP_DESC = record
        SizeInBytes: UINT64;
        Properties: TD3D12_HEAP_PROPERTIES;
        Alignment: UINT64;
        Flags: TD3D12_HEAP_FLAGS;
    end;

    TD3D12_RESOURCE_DIMENSION = (
        D3D12_RESOURCE_DIMENSION_UNKNOWN = 0,
        D3D12_RESOURCE_DIMENSION_BUFFER = 1,
        D3D12_RESOURCE_DIMENSION_TEXTURE1D = 2,
        D3D12_RESOURCE_DIMENSION_TEXTURE2D = 3,
        D3D12_RESOURCE_DIMENSION_TEXTURE3D = 4
        );

    TD3D12_TEXTURE_LAYOUT = (
        D3D12_TEXTURE_LAYOUT_UNKNOWN = 0,
        D3D12_TEXTURE_LAYOUT_ROW_MAJOR = 1,
        D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE = 2,
        D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE = 3
        );

    TD3D12_RESOURCE_FLAGS = (
        D3D12_RESOURCE_FLAG_NONE = 0,
        D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET = $1,
        D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL = $2,
        D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS = $4,
        D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE = $8,
        D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER = $10,
        D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS = $20
        );


    TD3D12_RESOURCE_DESC = record
        Dimension: TD3D12_RESOURCE_DIMENSION;
        Alignment: UINT64;
        Width: UINT64;
        Height: UINT;
        DepthOrArraySize: UINT16;
        MipLevels: UINT16;
        Format: TDXGI_FORMAT;
        SampleDesc: TDXGI_SAMPLE_DESC;
        Layout: TD3D12_TEXTURE_LAYOUT;
        Flags: TD3D12_RESOURCE_FLAGS;
    end;

    PD3D12_RESOURCE_DESC = ^TD3D12_RESOURCE_DESC;

    TD3D12_DEPTH_STENCIL_VALUE = record
        Depth: single;
        Stencil: UINT8;
    end;

    PD3D12_DEPTH_STENCIL_VALUE = ^TD3D12_DEPTH_STENCIL_VALUE;


    TD3D12_CLEAR_VALUE = record
        Format: TDXGI_FORMAT;
        case integer of
            0: (Color: TSingleArray4);
            1: (DepthStencil: TD3D12_DEPTH_STENCIL_VALUE);
    end;

    PD3D12_CLEAR_VALUE = ^TD3D12_CLEAR_VALUE;

    TD3D12_RANGE = record
        _Begin: SIZE_T;
        _End: SIZE_T;
    end;

    PD3D12_RANGE = ^TD3D12_RANGE;

    TD3D12_SUBRESOURCE_INFO = record
        Offset: UINT64;
        RowPitch: UINT;
        DepthPitch: UINT;
    end;

    PD3D12_SUBRESOURCE_INFO = ^TD3D12_SUBRESOURCE_INFO;

    TD3D12_TILED_RESOURCE_COORDINATE = record
        X: UINT;
        Y: UINT;
        Z: UINT;
        Subresource: UINT;
    end;

    PD3D12_TILED_RESOURCE_COORDINATE = ^TD3D12_TILED_RESOURCE_COORDINATE;


    TD3D12_TILE_REGION_SIZE = record
        NumTiles: UINT;
        UseBox: boolean;
        Width: UINT;
        Height: UINT16;
        Depth: UINT16;
    end;

    PD3D12_TILE_REGION_SIZE = ^TD3D12_TILE_REGION_SIZE;

    TD3D12_TILE_RANGE_FLAGS = (
        D3D12_TILE_RANGE_FLAG_NONE = 0,
        D3D12_TILE_RANGE_FLAG_NULL = 1,
        D3D12_TILE_RANGE_FLAG_SKIP = 2,
        D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE = 4
        );

    PD3D12_TILE_RANGE_FLAGS = ^TD3D12_TILE_RANGE_FLAGS;

    TD3D12_SUBRESOURCE_TILING = record
        WidthInTiles: UINT;
        HeightInTiles: UINT16;
        DepthInTiles: UINT16;
        StartTileIndexInOverallResource: UINT;
    end;

    PD3D12_SUBRESOURCE_TILING = ^TD3D12_SUBRESOURCE_TILING;

    TD3D12_TILE_SHAPE = record
        WidthInTexels: UINT;
        HeightInTexels: UINT;
        DepthInTexels: UINT;
    end;

    PD3D12_TILE_SHAPE = ^TD3D12_TILE_SHAPE;

    TD3D12_PACKED_MIP_INFO = record
        NumStandardMips: UINT8;
        NumPackedMips: UINT8;
        NumTilesForPackedMips: UINT;
        StartTileIndexInOverallResource: UINT;
    end;

    PD3D12_PACKED_MIP_INFO = ^TD3D12_PACKED_MIP_INFO;

    TD3D12_TILE_MAPPING_FLAGS = (
        D3D12_TILE_MAPPING_FLAG_NONE = 0,
        D3D12_TILE_MAPPING_FLAG_NO_HAZARD = $1
        );


    TD3D12_TILE_COPY_FLAGS = (
        D3D12_TILE_COPY_FLAG_NONE = 0,
        D3D12_TILE_COPY_FLAG_NO_HAZARD = $1,
        D3D12_TILE_COPY_FLAG_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE = $2,
        D3D12_TILE_COPY_FLAG_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER = $4
        );


    TD3D12_RESOURCE_STATES = (
        D3D12_RESOURCE_STATE_COMMON = 0,
        D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER = $1,
        D3D12_RESOURCE_STATE_INDEX_BUFFER = $2,
        D3D12_RESOURCE_STATE_RENDER_TARGET = $4,
        D3D12_RESOURCE_STATE_UNORDERED_ACCESS = $8,
        D3D12_RESOURCE_STATE_DEPTH_WRITE = $10,
        D3D12_RESOURCE_STATE_DEPTH_READ = $20,
        D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE = $40,
        D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE = $80,
        D3D12_RESOURCE_STATE_STREAM_OUT = $100,
        D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT = $200,
        D3D12_RESOURCE_STATE_COPY_DEST = $400,
        D3D12_RESOURCE_STATE_COPY_SOURCE = $800,
        D3D12_RESOURCE_STATE_RESOLVE_DEST = $1000,
        D3D12_RESOURCE_STATE_RESOLVE_SOURCE = $2000,
        D3D12_RESOURCE_STATE_GENERIC_READ = Ord(D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER) or Ord(
        D3D12_RESOURCE_STATE_INDEX_BUFFER) or Ord(D3D12_RESOURCE_STATE_COPY_SOURCE) or Ord(D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE) or
        Ord(D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE) or Ord(D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT),
		D3D12_RESOURCE_STATE_PRESENT = 0,
        D3D12_RESOURCE_STATE_PREDICATION = $200
        );


    ID3D12Resource = interface;
    PID3D12Resource = ^ID3D12Resource;

    TD3D12_RESOURCE_BARRIER_TYPE = (
        D3D12_RESOURCE_BARRIER_TYPE_TRANSITION = 0,
        D3D12_RESOURCE_BARRIER_TYPE_ALIASING = (D3D12_RESOURCE_BARRIER_TYPE_TRANSITION + 1),
        D3D12_RESOURCE_BARRIER_TYPE_UAV = (D3D12_RESOURCE_BARRIER_TYPE_ALIASING + 1)
        );


    TD3D12_RESOURCE_TRANSITION_BARRIER = record
        pResource: PID3D12Resource;
        Subresource: UINT;
        StateBefore: TD3D12_RESOURCE_STATES;
        StateAfter: TD3D12_RESOURCE_STATES;
    end;

    TD3D12_RESOURCE_ALIASING_BARRIER = record
        pResourceBefore: PID3D12Resource;
        pResourceAfter: PID3D12Resource;
    end;

    TD3D12_RESOURCE_UAV_BARRIER = record
        pResource: PID3D12Resource;
    end;

    TD3D12_RESOURCE_BARRIER_FLAGS = (
        D3D12_RESOURCE_BARRIER_FLAG_NONE = 0,
        D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY = $1,
        D3D12_RESOURCE_BARRIER_FLAG_END_ONLY = $2
        );


    TD3D12_RESOURCE_BARRIER = record
        _Type: TD3D12_RESOURCE_BARRIER_TYPE;
        Flags: TD3D12_RESOURCE_BARRIER_FLAGS;
        case integer of
            0: (Transition: TD3D12_RESOURCE_TRANSITION_BARRIER);
            1: (Aliasing: TD3D12_RESOURCE_ALIASING_BARRIER);
            2: (UAV: TD3D12_RESOURCE_UAV_BARRIER);

    end;

    PD3D12_RESOURCE_BARRIER = ^TD3D12_RESOURCE_BARRIER;


    TD3D12_SUBRESOURCE_FOOTPRINT = record
        Format: TDXGI_FORMAT;
        Width: UINT;
        Height: UINT;
        Depth: UINT;
        RowPitch: UINT;
    end;

    TD3D12_PLACED_SUBRESOURCE_FOOTPRINT = record
        Offset: UINT64;
        Footprint: TD3D12_SUBRESOURCE_FOOTPRINT;
    end;

    PD3D12_PLACED_SUBRESOURCE_FOOTPRINT = ^TD3D12_PLACED_SUBRESOURCE_FOOTPRINT;

    TD3D12_TEXTURE_COPY_TYPE = (
        D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX = 0,
        D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT = 1
        );


    TD3D12_TEXTURE_COPY_LOCATION = record
        pResource: PID3D12Resource;
        _Type: TD3D12_TEXTURE_COPY_TYPE;
        case integer of
            0: (PlacedFootprint: TD3D12_PLACED_SUBRESOURCE_FOOTPRINT);
            1: (SubresourceIndex: UINT);

    end;

    TD3D12_SHADER_COMPONENT_MAPPING = (
        D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_0 = 0,
        D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1 = 1,
        D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_2 = 2,
        D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_3 = 3,
        D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_0 = 4,
        D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_1 = 5
        );


    TD3D12_BUFFER_SRV_FLAGS = (
        D3D12_BUFFER_SRV_FLAG_NONE = 0,
        D3D12_BUFFER_SRV_FLAG_RAW = $1
        );


    TD3D12_BUFFER_SRV = record
        FirstElement: UINT64;
        NumElements: UINT;
        StructureByteStride: UINT;
        Flags: TD3D12_BUFFER_SRV_FLAGS;
    end;

    TD3D12_TEX1D_SRV = record
        MostDetailedMip: UINT;
        MipLevels: UINT;
        ResourceMinLODClamp: single;
    end;

    TD3D12_TEX1D_ARRAY_SRV = record
        MostDetailedMip: UINT;
        MipLevels: UINT;
        FirstArraySlice: UINT;
        ArraySize: UINT;
        ResourceMinLODClamp: single;
    end;

    TD3D12_TEX2D_SRV = record
        MostDetailedMip: UINT;
        MipLevels: UINT;
        PlaneSlice: UINT;
        ResourceMinLODClamp: single;
    end;

    TD3D12_TEX2D_ARRAY_SRV = record
        MostDetailedMip: UINT;
        MipLevels: UINT;
        FirstArraySlice: UINT;
        ArraySize: UINT;
        PlaneSlice: UINT;
        ResourceMinLODClamp: single;
    end;

    TD3D12_TEX3D_SRV = record
        MostDetailedMip: UINT;
        MipLevels: UINT;
        ResourceMinLODClamp: single;
    end;

    TD3D12_TEXCUBE_SRV = record
        MostDetailedMip: UINT;
        MipLevels: UINT;
        ResourceMinLODClamp: single;
    end;

    TD3D12_TEXCUBE_ARRAY_SRV = record
        MostDetailedMip: UINT;
        MipLevels: UINT;
        First2DArrayFace: UINT;
        NumCubes: UINT;
        ResourceMinLODClamp: single;
    end;

    TD3D12_TEX2DMS_SRV = record
        UnusedField_NothingToDefine: UINT;
    end;

    TD3D12_TEX2DMS_ARRAY_SRV = record
        FirstArraySlice: UINT;
        ArraySize: UINT;
    end;

    TD3D12_SRV_DIMENSION = (
        D3D12_SRV_DIMENSION_UNKNOWN = 0,
        D3D12_SRV_DIMENSION_BUFFER = 1,
        D3D12_SRV_DIMENSION_TEXTURE1D = 2,
        D3D12_SRV_DIMENSION_TEXTURE1DARRAY = 3,
        D3D12_SRV_DIMENSION_TEXTURE2D = 4,
        D3D12_SRV_DIMENSION_TEXTURE2DARRAY = 5,
        D3D12_SRV_DIMENSION_TEXTURE2DMS = 6,
        D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY = 7,
        D3D12_SRV_DIMENSION_TEXTURE3D = 8,
        D3D12_SRV_DIMENSION_TEXTURECUBE = 9,
        D3D12_SRV_DIMENSION_TEXTURECUBEARRAY = 10
        );

    TD3D12_SHADER_RESOURCE_VIEW_DESC = record
        Format: TDXGI_FORMAT;
        ViewDimension: TD3D12_SRV_DIMENSION;
        Shader4ComponentMapping: UINT;
        case integer of
            0: (Buffer: TD3D12_BUFFER_SRV);
            1: (Texture1D: TD3D12_TEX1D_SRV);
            2: (Texture1DArray: TD3D12_TEX1D_ARRAY_SRV);
            3: (Texture2D: TD3D12_TEX2D_SRV);
            4: (Texture2DArray: TD3D12_TEX2D_ARRAY_SRV);
            5: (Texture2DMS: TD3D12_TEX2DMS_SRV);
            6: (Texture2DMSArray: TD3D12_TEX2DMS_ARRAY_SRV);
            7: (Texture3D: TD3D12_TEX3D_SRV);
            8: (TextureCube: TD3D12_TEXCUBE_SRV);
            9: (TextureCubeArray: TD3D12_TEXCUBE_ARRAY_SRV);
    end;

    TD3D12_CONSTANT_BUFFER_VIEW_DESC = record
        BufferLocation: TD3D12_GPU_VIRTUAL_ADDRESS;
        SizeInBytes: UINT;
    end;

    TD3D12_FILTER = (
        D3D12_FILTER_MIN_MAG_MIP_POINT = 0,
        D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR = $1,
        D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = $4,
        D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR = $5,
        D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT = $10,
        D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = $11,
        D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT = $14,
        D3D12_FILTER_MIN_MAG_MIP_LINEAR = $15,
        D3D12_FILTER_ANISOTROPIC = $55,
        D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT = $80,
        D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = $81,
        D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = $84,
        D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = $85,
        D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = $90,
        D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = $91,
        D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = $94,
        D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = $95,
        D3D12_FILTER_COMPARISON_ANISOTROPIC = $d5,
        D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT = $100,
        D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = $101,
        D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = $104,
        D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = $105,
        D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = $110,
        D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = $111,
        D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = $114,
        D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = $115,
        D3D12_FILTER_MINIMUM_ANISOTROPIC = $155,
        D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT = $180,
        D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = $181,
        D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = $184,
        D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = $185,
        D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = $190,
        D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = $191,
        D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = $194,
        D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = $195,
        D3D12_FILTER_MAXIMUM_ANISOTROPIC = $1d5
        );

    TD3D12_FILTER_TYPE = (
        D3D12_FILTER_TYPE_POINT = 0,
        D3D12_FILTER_TYPE_LINEAR = 1
        );

    TD3D12_FILTER_REDUCTION_TYPE = (
        D3D12_FILTER_REDUCTION_TYPE_STANDARD = 0,
        D3D12_FILTER_REDUCTION_TYPE_COMPARISON = 1,
        D3D12_FILTER_REDUCTION_TYPE_MINIMUM = 2,
        D3D12_FILTER_REDUCTION_TYPE_MAXIMUM = 3
        );


    TD3D12_TEXTURE_ADDRESS_MODE = (
        D3D12_TEXTURE_ADDRESS_MODE_WRAP = 1,
        D3D12_TEXTURE_ADDRESS_MODE_MIRROR = 2,
        D3D12_TEXTURE_ADDRESS_MODE_CLAMP = 3,
        D3D12_TEXTURE_ADDRESS_MODE_BORDER = 4,
        D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE = 5
        );

    TD3D12_SAMPLER_DESC = record
        Filter: TD3D12_FILTER;
        AddressU: TD3D12_TEXTURE_ADDRESS_MODE;
        AddressV: TD3D12_TEXTURE_ADDRESS_MODE;
        AddressW: TD3D12_TEXTURE_ADDRESS_MODE;
        MipLODBias: single;
        MaxAnisotropy: UINT;
        ComparisonFunc: TD3D12_COMPARISON_FUNC;
        BorderColor: TSingleArray4;
        MinLOD: single;
        MaxLOD: single;
    end;

    TD3D12_BUFFER_UAV_FLAGS = (
        D3D12_BUFFER_UAV_FLAG_NONE = 0,
        D3D12_BUFFER_UAV_FLAG_RAW = $1
        );


    TD3D12_BUFFER_UAV = record
        FirstElement: UINT64;
        NumElements: UINT;
        StructureByteStride: UINT;
        CounterOffsetInBytes: UINT64;
        Flags: TD3D12_BUFFER_UAV_FLAGS;
    end;

    TD3D12_TEX1D_UAV = record
        MipSlice: UINT;
    end;

    TD3D12_TEX1D_ARRAY_UAV = record
        MipSlice: UINT;
        FirstArraySlice: UINT;
        ArraySize: UINT;
    end;

    TD3D12_TEX2D_UAV = record
        MipSlice: UINT;
        PlaneSlice: UINT;
    end;

    TD3D12_TEX2D_ARRAY_UAV = record
        MipSlice: UINT;
        FirstArraySlice: UINT;
        ArraySize: UINT;
        PlaneSlice: UINT;
    end;

    TD3D12_TEX3D_UAV = record
        MipSlice: UINT;
        FirstWSlice: UINT;
        WSize: UINT;
    end;

    TD3D12_UAV_DIMENSION = (
        D3D12_UAV_DIMENSION_UNKNOWN = 0,
        D3D12_UAV_DIMENSION_BUFFER = 1,
        D3D12_UAV_DIMENSION_TEXTURE1D = 2,
        D3D12_UAV_DIMENSION_TEXTURE1DARRAY = 3,
        D3D12_UAV_DIMENSION_TEXTURE2D = 4,
        D3D12_UAV_DIMENSION_TEXTURE2DARRAY = 5,
        D3D12_UAV_DIMENSION_TEXTURE3D = 8
        );

    TD3D12_UNORDERED_ACCESS_VIEW_DESC = record
        Format: TDXGI_FORMAT;
        ViewDimension: TD3D12_UAV_DIMENSION;
        case integer of
            0: (Buffer: TD3D12_BUFFER_UAV);
            1: (Texture1D: TD3D12_TEX1D_UAV);
            2: (Texture1DArray: TD3D12_TEX1D_ARRAY_UAV);
            3: (Texture2D: TD3D12_TEX2D_UAV);
            4: (Texture2DArray: TD3D12_TEX2D_ARRAY_UAV);
            5: (Texture3D: TD3D12_TEX3D_UAV);
    end;

    TD3D12_BUFFER_RTV = record
        FirstElement: UINT64;
        NumElements: UINT;
    end;

    TD3D12_TEX1D_RTV = record
        MipSlice: UINT;
    end;

    TD3D12_TEX1D_ARRAY_RTV = record
        MipSlice: UINT;
        FirstArraySlice: UINT;
        ArraySize: UINT;
    end;

    TD3D12_TEX2D_RTV = record
        MipSlice: UINT;
        PlaneSlice: UINT;
    end;

    TD3D12_TEX2DMS_RTV = record
        UnusedField_NothingToDefine: UINT;
    end;

    TD3D12_TEX2D_ARRAY_RTV = record
        MipSlice: UINT;
        FirstArraySlice: UINT;
        ArraySize: UINT;
        PlaneSlice: UINT;
    end;

    TD3D12_TEX2DMS_ARRAY_RTV = record
        FirstArraySlice: UINT;
        ArraySize: UINT;
    end;

    TD3D12_TEX3D_RTV = record
        MipSlice: UINT;
        FirstWSlice: UINT;
        WSize: UINT;
    end;

    TD3D12_RTV_DIMENSION = (
        D3D12_RTV_DIMENSION_UNKNOWN = 0,
        D3D12_RTV_DIMENSION_BUFFER = 1,
        D3D12_RTV_DIMENSION_TEXTURE1D = 2,
        D3D12_RTV_DIMENSION_TEXTURE1DARRAY = 3,
        D3D12_RTV_DIMENSION_TEXTURE2D = 4,
        D3D12_RTV_DIMENSION_TEXTURE2DARRAY = 5,
        D3D12_RTV_DIMENSION_TEXTURE2DMS = 6,
        D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY = 7,
        D3D12_RTV_DIMENSION_TEXTURE3D = 8
        );

    TD3D12_RENDER_TARGET_VIEW_DESC = record
        Format: TDXGI_FORMAT;
        ViewDimension: TD3D12_RTV_DIMENSION;
        case integer of
            0: (Buffer: TD3D12_BUFFER_RTV);
            1: (Texture1D: TD3D12_TEX1D_RTV);
            2: (Texture1DArray: TD3D12_TEX1D_ARRAY_RTV);
            3: (Texture2D: TD3D12_TEX2D_RTV);
            4: (Texture2DArray: TD3D12_TEX2D_ARRAY_RTV);
            5: (Texture2DMS: TD3D12_TEX2DMS_RTV);
            6: (Texture2DMSArray: TD3D12_TEX2DMS_ARRAY_RTV);
            7: (Texture3D: TD3D12_TEX3D_RTV);
    end;

    TD3D12_TEX1D_DSV = record
        MipSlice: UINT;
    end;

    TD3D12_TEX1D_ARRAY_DSV = record
        MipSlice: UINT;
        FirstArraySlice: UINT;
        ArraySize: UINT;
    end;

    TD3D12_TEX2D_DSV = record
        MipSlice: UINT;
    end;

    TD3D12_TEX2D_ARRAY_DSV = record
        MipSlice: UINT;
        FirstArraySlice: UINT;
        ArraySize: UINT;
    end;

    TD3D12_TEX2DMS_DSV = record
        UnusedField_NothingToDefine: UINT;
    end;

    TD3D12_TEX2DMS_ARRAY_DSV = record
        FirstArraySlice: UINT;
        ArraySize: UINT;
    end;

    TD3D12_DSV_FLAGS = (
        D3D12_DSV_FLAG_NONE = 0,
        D3D12_DSV_FLAG_READ_ONLY_DEPTH = $1,
        D3D12_DSV_FLAG_READ_ONLY_STENCIL = $2
        );


    TD3D12_DSV_DIMENSION = (
        D3D12_DSV_DIMENSION_UNKNOWN = 0,
        D3D12_DSV_DIMENSION_TEXTURE1D = 1,
        D3D12_DSV_DIMENSION_TEXTURE1DARRAY = 2,
        D3D12_DSV_DIMENSION_TEXTURE2D = 3,
        D3D12_DSV_DIMENSION_TEXTURE2DARRAY = 4,
        D3D12_DSV_DIMENSION_TEXTURE2DMS = 5,
        D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY = 6
        );

    TD3D12_DEPTH_STENCIL_VIEW_DESC = record
        Format: TDXGI_FORMAT;
        ViewDimension: TD3D12_DSV_DIMENSION;
        Flags: TD3D12_DSV_FLAGS;
        case integer of
            0: (Texture1D: TD3D12_TEX1D_DSV);
            1: (Texture1DArray: TD3D12_TEX1D_ARRAY_DSV);
            2: (Texture2D: TD3D12_TEX2D_DSV);
            3: (Texture2DArray: TD3D12_TEX2D_ARRAY_DSV);
            4: (Texture2DMS: TD3D12_TEX2DMS_DSV);
            5: (Texture2DMSArray: TD3D12_TEX2DMS_ARRAY_DSV);
    end;

    TD3D12_CLEAR_FLAGS = (
        D3D12_CLEAR_FLAG_DEPTH = $1,
        D3D12_CLEAR_FLAG_STENCIL = $2
        );


    TD3D12_FENCE_FLAGS = (
        D3D12_FENCE_FLAG_NONE = 0,
        D3D12_FENCE_FLAG_SHARED = $1,
        D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER = $2
        );


    TD3D12_DESCRIPTOR_HEAP_TYPE = (
        D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV = 0,
        D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER = (D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV + 1),
        D3D12_DESCRIPTOR_HEAP_TYPE_RTV = (D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER + 1),
        D3D12_DESCRIPTOR_HEAP_TYPE_DSV = (D3D12_DESCRIPTOR_HEAP_TYPE_RTV + 1),
        D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES = (D3D12_DESCRIPTOR_HEAP_TYPE_DSV + 1)
        );

    TD3D12_DESCRIPTOR_HEAP_FLAGS = (
        D3D12_DESCRIPTOR_HEAP_FLAG_NONE = 0,
        D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE = $1
        );


    TD3D12_DESCRIPTOR_HEAP_DESC = record
        _Type: TD3D12_DESCRIPTOR_HEAP_TYPE;
        NumDescriptors: UINT;
        Flags: TD3D12_DESCRIPTOR_HEAP_FLAGS;
        NodeMask: UINT;
    end;

    TD3D12_DESCRIPTOR_RANGE_TYPE = (
        D3D12_DESCRIPTOR_RANGE_TYPE_SRV = 0,
        D3D12_DESCRIPTOR_RANGE_TYPE_UAV = (D3D12_DESCRIPTOR_RANGE_TYPE_SRV + 1),
        D3D12_DESCRIPTOR_RANGE_TYPE_CBV = (D3D12_DESCRIPTOR_RANGE_TYPE_UAV + 1),
        D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER = (D3D12_DESCRIPTOR_RANGE_TYPE_CBV + 1)
        );

    TD3D12_DESCRIPTOR_RANGE = record
        RangeType: TD3D12_DESCRIPTOR_RANGE_TYPE;
        NumDescriptors: UINT;
        BaseShaderRegister: UINT;
        RegisterSpace: UINT;
        OffsetInDescriptorsFromTableStart: UINT;
    end;

    PD3D12_DESCRIPTOR_RANGE = ^TD3D12_DESCRIPTOR_RANGE;

    TD3D12_ROOT_DESCRIPTOR_TABLE = record
        NumDescriptorRanges: UINT;
        pDescriptorRanges: PD3D12_DESCRIPTOR_RANGE;
    end;

    TD3D12_ROOT_CONSTANTS = record
        ShaderRegister: UINT;
        RegisterSpace: UINT;
        Num32BitValues: UINT;
    end;

    TD3D12_ROOT_DESCRIPTOR = record
        ShaderRegister: UINT;
        RegisterSpace: UINT;
    end;

    TD3D12_SHADER_VISIBILITY = (
        D3D12_SHADER_VISIBILITY_ALL = 0,
        D3D12_SHADER_VISIBILITY_VERTEX = 1,
        D3D12_SHADER_VISIBILITY_HULL = 2,
        D3D12_SHADER_VISIBILITY_DOMAIN = 3,
        D3D12_SHADER_VISIBILITY_GEOMETRY = 4,
        D3D12_SHADER_VISIBILITY_PIXEL = 5
        );

    TD3D12_ROOT_PARAMETER_TYPE = (
        D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE = 0,
        D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS = (D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE + 1),
        D3D12_ROOT_PARAMETER_TYPE_CBV = (D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS + 1),
        D3D12_ROOT_PARAMETER_TYPE_SRV = (D3D12_ROOT_PARAMETER_TYPE_CBV + 1),
        D3D12_ROOT_PARAMETER_TYPE_UAV = (D3D12_ROOT_PARAMETER_TYPE_SRV + 1)
        );

    TD3D12_ROOT_PARAMETER = record
        ParameterType: TD3D12_ROOT_PARAMETER_TYPE;
        case integer of
            0: (DescriptorTable: TD3D12_ROOT_DESCRIPTOR_TABLE;
                ShaderVisibility: TD3D12_SHADER_VISIBILITY);
            1: (Constants: TD3D12_ROOT_CONSTANTS);
            2: (Descriptor: TD3D12_ROOT_DESCRIPTOR);
    end;

    PD3D12_ROOT_PARAMETER = ^TD3D12_ROOT_PARAMETER;

    TD3D12_ROOT_SIGNATURE_FLAGS = (
        D3D12_ROOT_SIGNATURE_FLAG_NONE = 0,
        D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT = $1,
        D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS = $2,
        D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS = $4,
        D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS = $8,
        D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS = $10,
        D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS = $20,
        D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT = $40
        );


    TD3D12_STATIC_BORDER_COLOR = (
        D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK = 0,
        D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK = (D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK + 1),
        D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE = (D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK + 1)
        );

    TD3D12_STATIC_SAMPLER_DESC = record
        Filter: TD3D12_FILTER;
        AddressU: TD3D12_TEXTURE_ADDRESS_MODE;
        AddressV: TD3D12_TEXTURE_ADDRESS_MODE;
        AddressW: TD3D12_TEXTURE_ADDRESS_MODE;
        MipLODBias: single;
        MaxAnisotropy: UINT;
        ComparisonFunc: TD3D12_COMPARISON_FUNC;
        BorderColor: TD3D12_STATIC_BORDER_COLOR;
        MinLOD: single;
        MaxLOD: single;
        ShaderRegister: UINT;
        RegisterSpace: UINT;
        ShaderVisibility: TD3D12_SHADER_VISIBILITY;
    end;

    PD3D12_STATIC_SAMPLER_DESC = ^TD3D12_STATIC_SAMPLER_DESC;

    TD3D12_ROOT_SIGNATURE_DESC = record
        NumParameters: UINT;
        pParameters: PD3D12_ROOT_PARAMETER;
        NumStaticSamplers: UINT;
        pStaticSamplers: PD3D12_STATIC_SAMPLER_DESC;
        Flags: TD3D12_ROOT_SIGNATURE_FLAGS;
    end;

    PD3D12_ROOT_SIGNATURE_DESC = ^TD3D12_ROOT_SIGNATURE_DESC;

    TD3D_ROOT_SIGNATURE_VERSION = (
        D3D_ROOT_SIGNATURE_VERSION_1 = $1
        );


    ID3D12RootSignatureDeserializer = interface(IUnknown)
        ['{34AB647B-3CC8-46AC-841B-C0965645C046}']

        function GetRootSignatureDesc(): TD3D12_ROOT_SIGNATURE_DESC; stdcall;

    end;


    TD3D12_CPU_DESCRIPTOR_HANDLE = record
        ptr: SIZE_T;
    end;

    PD3D12_CPU_DESCRIPTOR_HANDLE = ^TD3D12_CPU_DESCRIPTOR_HANDLE;

    TD3D12_GPU_DESCRIPTOR_HANDLE = record
        ptr: UINT64;
    end;

    PD3D12_GPU_DESCRIPTOR_HANDLE = ^TD3D12_GPU_DESCRIPTOR_HANDLE;

    // If rects are supplied in D3D12_DISCARD_REGION, below, the resource
    // must have 2D subresources with all specified subresources the same dimension.
    TD3D12_DISCARD_REGION = record

        NumRects: UINT;
        pRects: PD3D12_RECT;
        FirstSubresource: UINT;
        NumSubresources: UINT;
    end;

    TD3D12_QUERY_HEAP_TYPE = (
        D3D12_QUERY_HEAP_TYPE_OCCLUSION = 0,
        D3D12_QUERY_HEAP_TYPE_TIMESTAMP = 1,
        D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS = 2,
        D3D12_QUERY_HEAP_TYPE_SO_STATISTICS = 3
        );

    TD3D12_QUERY_HEAP_DESC = record
        _Type: TD3D12_QUERY_HEAP_TYPE;
        Count: UINT;
        NodeMask: UINT;
    end;

    TD3D12_QUERY_TYPE = (
        D3D12_QUERY_TYPE_OCCLUSION = 0,
        D3D12_QUERY_TYPE_BINARY_OCCLUSION = 1,
        D3D12_QUERY_TYPE_TIMESTAMP = 2,
        D3D12_QUERY_TYPE_PIPELINE_STATISTICS = 3,
        D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0 = 4,
        D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1 = 5,
        D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2 = 6,
        D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3 = 7
        );

    TD3D12_PREDICATION_OP = (
        D3D12_PREDICATION_OP_EQUAL_ZERO = 0,
        D3D12_PREDICATION_OP_NOT_EQUAL_ZERO = 1
        );

    TD3D12_QUERY_DATA_PIPELINE_STATISTICS = record

        IAVertices: UINT64;
        IAPrimitives: UINT64;
        VSInvocations: UINT64;
        GSInvocations: UINT64;
        GSPrimitives: UINT64;
        CInvocations: UINT64;
        CPrimitives: UINT64;
        PSInvocations: UINT64;
        HSInvocations: UINT64;
        DSInvocations: UINT64;
        CSInvocations: UINT64;
    end;

    TD3D12_QUERY_DATA_SO_STATISTICS = record

        NumPrimitivesWritten: UINT64;
        PrimitivesStorageNeeded: UINT64;
    end;

    TD3D12_STREAM_OUTPUT_BUFFER_VIEW = record

        BufferLocation: TD3D12_GPU_VIRTUAL_ADDRESS;
        SizeInBytes: UINT64;
        BufferFilledSizeLocation: TD3D12_GPU_VIRTUAL_ADDRESS;
    end;

    PD3D12_STREAM_OUTPUT_BUFFER_VIEW = ^TD3D12_STREAM_OUTPUT_BUFFER_VIEW;

    TD3D12_DRAW_ARGUMENTS = record

        VertexCountPerInstance: UINT;
        InstanceCount: UINT;
        StartVertexLocation: UINT;
        StartInstanceLocation: UINT;
    end;

    PD3D12_DRAW_ARGUMENTS = ^TD3D12_DRAW_ARGUMENTS;

    TD3D12_DRAW_INDEXED_ARGUMENTS = record
        IndexCountPerInstance: UINT;
        InstanceCount: UINT;
        StartIndexLocation: UINT;
        BaseVertexLocation: INT32;
        StartInstanceLocation: UINT;
    end;

    PD3D12_DRAW_INDEXED_ARGUMENTS = ^TD3D12_DRAW_INDEXED_ARGUMENTS;

    TD3D12_DISPATCH_ARGUMENTS = record

        ThreadGroupCountX: UINT;
        ThreadGroupCountY: UINT;
        ThreadGroupCountZ: UINT;
    end;

    PD3D12_DISPATCH_ARGUMENTS = ^TD3D12_DISPATCH_ARGUMENTS;

    TD3D12_VERTEX_BUFFER_VIEW = record

        BufferLocation: TD3D12_GPU_VIRTUAL_ADDRESS;
        SizeInBytes: UINT;
        StrideInBytes: UINT;
    end;
    PD3D12_VERTEX_BUFFER_VIEW = ^TD3D12_VERTEX_BUFFER_VIEW;

    TD3D12_INDEX_BUFFER_VIEW = record

        BufferLocation: TD3D12_GPU_VIRTUAL_ADDRESS;
        SizeInBytes: UINT;
        Format: TDXGI_FORMAT;
    end;

    TD3D12_INDIRECT_ARGUMENT_TYPE = (
        D3D12_INDIRECT_ARGUMENT_TYPE_DRAW = 0,
        D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED = (D3D12_INDIRECT_ARGUMENT_TYPE_DRAW + 1),
        D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH = (D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED + 1),
        D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW = (D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH + 1),
        D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW = (D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW + 1),
        D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT = (D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW + 1),
        D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW = (D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT + 1),
        D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW = (D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW + 1),
        D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW = (D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW + 1)
        );


    TD3D12_INDIRECT_ARGUMENT_DESC_VertexBuffer = record
        Slot: UINT;
    end;


    TD3D12_INDIRECT_ARGUMENT_DESC_Constant = record
        RootParameterIndex: UINT;
        DestOffsetIn32BitValues: UINT;
        Num32BitValuesToSet: UINT;
    end;

    TD3D12_INDIRECT_ARGUMENT_DESC_ConstantBufferView = record
        RootParameterIndex: UINT;
    end;

    TD3D12_INDIRECT_ARGUMENT_DESC_ShaderResourceView = record
        RootParameterIndex: UINT;
    end;

    TD3D12_INDIRECT_ARGUMENT_DESC_UnorderedAccessView = record
        RootParameterIndex: UINT;
    end;

    TD3D12_INDIRECT_ARGUMENT_DESC = record
        _Type: TD3D12_INDIRECT_ARGUMENT_TYPE;
        case integer of
            0: (VertexBuffer: TD3D12_INDIRECT_ARGUMENT_DESC_VertexBuffer);
            1: (Constant: TD3D12_INDIRECT_ARGUMENT_DESC_Constant);
            2: (ConstantBufferView: TD3D12_INDIRECT_ARGUMENT_DESC_ConstantBufferView);
            3: (ShaderResourceView: TD3D12_INDIRECT_ARGUMENT_DESC_ShaderResourceView);
            4: (UnorderedAccessView: TD3D12_INDIRECT_ARGUMENT_DESC_UnorderedAccessView);
    end;

    PD3D12_INDIRECT_ARGUMENT_DESC = ^TD3D12_INDIRECT_ARGUMENT_DESC;


    TD3D12_COMMAND_SIGNATURE_DESC = record
        ByteStride: UINT;
        NumArgumentDescs: UINT;
        pArgumentDescs: PD3D12_INDIRECT_ARGUMENT_DESC;
        NodeMask: UINT;
    end;

    ID3D12Pageable = interface(ID3D12DeviceChild)
        ['{63ee58fb-1268-4835-86da-f008ce62f0d6}']
    end;

    PID3D12Pageable = ^ID3D12Pageable;


    ID3D12Heap = interface(ID3D12Pageable)
        ['{6b3b2502-6e51-45b3-90ee-9884265e8df3}']
        function GetDesc(): TD3D12_HEAP_DESC; stdcall;
    end;


    ID3D12Resource = interface(ID3D12Pageable)
        ['{696442be-a72e-4059-bc79-5b5c98040fad}']

        function Map(Subresource: UINT; const pReadRange: TD3D12_RANGE; out ppData): HResult; stdcall;

        procedure Unmap(Subresource: UINT; const pWrittenRange: TD3D12_RANGE); stdcall;

        function GetDesc(): TD3D12_RESOURCE_DESC; stdcall;

        function GetGPUVirtualAddress(): TD3D12_GPU_VIRTUAL_ADDRESS; stdcall;

        function WriteToSubresource(DstSubresource: UINT; const pDstBox: TD3D12_BOX; pSrcData: pointer;
            SrcRowPitch: UINT; SrcDepthPitch: UINT): HResult; stdcall;

        function ReadFromSubresource(out pDstData: pointer; DstRowPitch: UINT; DstDepthPitch: UINT;
            SrcSubresource: UINT; const pSrcBox: TD3D12_BOX): HResult; stdcall;

        function GetHeapProperties(out pHeapProperties: TD3D12_HEAP_PROPERTIES; out pHeapFlags: TD3D12_HEAP_FLAGS): HResult; stdcall;

    end;


    ID3D12CommandAllocator = interface(ID3D12Pageable)
        ['{6102dee4-af59-4b09-b999-b44d73f09b24}']

        function Reset(): HResult; stdcall;

    end;


    ID3D12Fence = interface(ID3D12Pageable)
        ['{0a753dcf-c4d8-4b91-adf6-be5a60d95a76}']

        function GetCompletedValue(): UINT64; stdcall;

        function SetEventOnCompletion(Value: UINT64; hEvent: THANDLE): HResult; stdcall;

        function Signal(Value: UINT64): HResult; stdcall;

    end;


    ID3D12PipelineState = interface(ID3D12Pageable)
        ['{765a30f3-f624-4c6f-a828-ace948622445}']

        function GetCachedBlob(out ppBlob: ID3DBlob): HResult; stdcall;

    end;


    ID3D12DescriptorHeap = interface(ID3D12Pageable)
        ['{8efb471d-616c-4f49-90f7-127bb763fa51}']

        function GetDesc(): TD3D12_DESCRIPTOR_HEAP_DESC; stdcall;

        function GetCPUDescriptorHandleForHeapStart(): TD3D12_CPU_DESCRIPTOR_HANDLE; stdcall;

        function GetGPUDescriptorHandleForHeapStart(): TD3D12_GPU_DESCRIPTOR_HANDLE; stdcall;

    end;

    PID3D12DescriptorHeap = ^ID3D12DescriptorHeap;


    ID3D12QueryHeap = interface(ID3D12Pageable)
        ['{0d9658ae-ed45-469e-a61d-970ec583cab4}']

    end;


    ID3D12CommandSignature = interface(ID3D12Pageable)
        ['{c36a797c-ec80-4f0a-8985-a7b2475082d1}']
    end;


    ID3D12CommandList = interface(ID3D12DeviceChild)
        ['{7116d91c-e7e4-47ce-b8c6-ec8168f437e5}']
        function GetType(): TD3D12_COMMAND_LIST_TYPE; stdcall;
    end;

    PID3D12CommandList = ^ID3D12CommandList;


    ID3D12GraphicsCommandList = interface(ID3D12CommandList)
        ['{5b160d0f-ac1b-4185-8ba8-b3ae42a5a455}']
        function Close(): HResult; stdcall;
        function Reset(pAllocator: ID3D12CommandAllocator; pInitialState: ID3D12PipelineState): HResult; stdcall;
        procedure ClearState(pPipelineState: ID3D12PipelineState); stdcall;
        procedure DrawInstanced(VertexCountPerInstance: UINT; InstanceCount: UINT; StartVertexLocation: UINT;
            StartInstanceLocation: UINT); stdcall;
        procedure DrawIndexedInstanced(IndexCountPerInstance: UINT; InstanceCount: UINT; StartIndexLocation: UINT;
            BaseVertexLocation: INT32; StartInstanceLocation: UINT); stdcall;
        procedure Dispatch(ThreadGroupCountX: UINT; ThreadGroupCountY: UINT; ThreadGroupCountZ: UINT); stdcall;
        procedure CopyBufferRegion(pDstBuffer: ID3D12Resource; DstOffset: UINT64; pSrcBuffer: ID3D12Resource;
            SrcOffset: UINT64; NumBytes: UINT64); stdcall;
        procedure CopyTextureRegion(const pDst: TD3D12_TEXTURE_COPY_LOCATION; DstX: UINT; DstY: UINT; DstZ: UINT;
            const pSrc: TD3D12_TEXTURE_COPY_LOCATION; const pSrcBox: TD3D12_BOX); stdcall;
        procedure CopyResource(pDstResource: ID3D12Resource; pSrcResource: ID3D12Resource); stdcall;
        procedure CopyTiles(pTiledResource: ID3D12Resource; const pTileRegionStartCoordinate: TD3D12_TILED_RESOURCE_COORDINATE;
            const pTileRegionSize: TD3D12_TILE_REGION_SIZE; pBuffer: ID3D12Resource; BufferStartOffsetInBytes: UINT64;
            Flags: TD3D12_TILE_COPY_FLAGS); stdcall;
        procedure ResolveSubresource(pDstResource: ID3D12Resource; DstSubresource: UINT; pSrcResource: ID3D12Resource;
            SrcSubresource: UINT; Format: TDXGI_FORMAT); stdcall;
        procedure IASetPrimitiveTopology(PrimitiveTopology: TD3D12_PRIMITIVE_TOPOLOGY); stdcall;
        procedure RSSetViewports(NumViewports: UINT; pViewports: PD3D12_VIEWPORT); stdcall;
        procedure RSSetScissorRects(NumRects: UINT; pRects: PD3D12_RECT); stdcall;
        procedure OMSetBlendFactor(BlendFactor: TSingleArray4); stdcall;
        procedure OMSetStencilRef(StencilRef: UINT); stdcall;
        procedure SetPipelineState(pPipelineState: ID3D12PipelineState); stdcall;


        procedure ResourceBarrier(NumBarriers: UINT; pBarriers: PD3D12_RESOURCE_BARRIER); stdcall;


        procedure ExecuteBundle(pCommandList: ID3D12GraphicsCommandList); stdcall;
        procedure SetDescriptorHeaps(NumDescriptorHeaps: UINT; ppDescriptorHeaps: PID3D12DescriptorHeap); stdcall;
        procedure SetComputeRootSignature(pRootSignature: ID3D12RootSignature); stdcall;
        procedure SetGraphicsRootSignature(pRootSignature: ID3D12RootSignature); stdcall;
        procedure SetComputeRootDescriptorTable(RootParameterIndex: UINT; BaseDescriptor: TD3D12_GPU_DESCRIPTOR_HANDLE); stdcall;
        procedure SetGraphicsRootDescriptorTable(RootParameterIndex: UINT; BaseDescriptor: TD3D12_GPU_DESCRIPTOR_HANDLE); stdcall;
        procedure SetComputeRoot32BitConstant(RootParameterIndex: UINT; SrcData: UINT; DestOffsetIn32BitValues: UINT); stdcall;
        procedure SetGraphicsRoot32BitConstant(RootParameterIndex: UINT; SrcData: UINT; DestOffsetIn32BitValues: UINT); stdcall;
        procedure SetComputeRoot32BitConstants(RootParameterIndex: UINT; Num32BitValuesToSet: UINT; pSrcData: Pointer;
            DestOffsetIn32BitValues: UINT); stdcall;
        procedure SetGraphicsRoot32BitConstants(RootParameterIndex: UINT; Num32BitValuesToSet: UINT; pSrcData: pointer;
            DestOffsetIn32BitValues: UINT); stdcall;
        procedure SetComputeRootConstantBufferView(RootParameterIndex: UINT; BufferLocation: TD3D12_GPU_VIRTUAL_ADDRESS); stdcall;
        procedure SetGraphicsRootConstantBufferView(RootParameterIndex: UINT; BufferLocation: TD3D12_GPU_VIRTUAL_ADDRESS); stdcall;
        procedure SetComputeRootShaderResourceView(RootParameterIndex: UINT; BufferLocation: TD3D12_GPU_VIRTUAL_ADDRESS); stdcall;
        procedure SetGraphicsRootShaderResourceView(RootParameterIndex: UINT; BufferLocation: TD3D12_GPU_VIRTUAL_ADDRESS); stdcall;
        procedure SetComputeRootUnorderedAccessView(RootParameterIndex: UINT; BufferLocation: TD3D12_GPU_VIRTUAL_ADDRESS); stdcall;
        procedure SetGraphicsRootUnorderedAccessView(RootParameterIndex: UINT; BufferLocation: TD3D12_GPU_VIRTUAL_ADDRESS); stdcall;
        procedure IASetIndexBuffer(const pView: TD3D12_INDEX_BUFFER_VIEW); stdcall;
        procedure IASetVertexBuffers(StartSlot: UINT; NumViews: UINT; pViews: PD3D12_VERTEX_BUFFER_VIEW); stdcall;
        procedure SOSetTargets(StartSlot: UINT; NumViews: UINT; pViews: PD3D12_STREAM_OUTPUT_BUFFER_VIEW); stdcall;
        procedure OMSetRenderTargets(NumRenderTargetDescriptors: UINT; const pRenderTargetDescriptors: TD3D12_CPU_DESCRIPTOR_HANDLE;
            RTsSingleHandleToDescriptorRange: boolean; const pDepthStencilDescriptor: TD3D12_CPU_DESCRIPTOR_HANDLE); stdcall;
        procedure ClearDepthStencilView(DepthStencilView: TD3D12_CPU_DESCRIPTOR_HANDLE; ClearFlags: TD3D12_CLEAR_FLAGS;
            Depth: single; Stencil: UINT8; NumRects: UINT; pRects: PD3D12_RECT); stdcall;
        procedure ClearRenderTargetView(RenderTargetView: TD3D12_CPU_DESCRIPTOR_HANDLE; ColorRGBA: TSingleArray4;
            NumRects: UINT; pRects: PD3D12_RECT); stdcall;
        procedure ClearUnorderedAccessViewUint(ViewGPUHandleInCurrentHeap: TD3D12_GPU_DESCRIPTOR_HANDLE;
            ViewCPUHandle: TD3D12_CPU_DESCRIPTOR_HANDLE; pResource: ID3D12Resource; Values: TUINTArray4;
            NumRects: UINT; pRects: PD3D12_RECT); stdcall;
        procedure ClearUnorderedAccessViewFloat(ViewGPUHandleInCurrentHeap: TD3D12_GPU_DESCRIPTOR_HANDLE;
            ViewCPUHandle: TD3D12_CPU_DESCRIPTOR_HANDLE; pResource: ID3D12Resource; Values: TSingleArray4;
            NumRects: UINT; pRects: PD3D12_RECT); stdcall;
        procedure DiscardResource(pResource: ID3D12Resource; const pRegion: TD3D12_DISCARD_REGION); stdcall;
        procedure BeginQuery(pQueryHeap: ID3D12QueryHeap; _Type: TD3D12_QUERY_TYPE; Index: UINT); stdcall;
        procedure EndQuery(pQueryHeap: ID3D12QueryHeap; _Type: TD3D12_QUERY_TYPE; Index: UINT); stdcall;
        procedure ResolveQueryData(pQueryHeap: ID3D12QueryHeap; _Type: TD3D12_QUERY_TYPE; StartIndex: UINT;
            NumQueries: UINT; pDestinationBuffer: ID3D12Resource; AlignedDestinationBufferOffset: UINT64); stdcall;
        procedure SetPredication(pBuffer: ID3D12Resource; AlignedBufferOffset: UINT64; Operation: TD3D12_PREDICATION_OP); stdcall;
        procedure SetMarker(Metadata: UINT; pData: pointer; Size: UINT); stdcall;
        procedure BeginEvent(Metadata: UINT; pData: pointer; Size: UINT); stdcall;
        procedure EndEvent(); stdcall;
        procedure ExecuteIndirect(pCommandSignature: ID3D12CommandSignature; MaxCommandCount: UINT;
            pArgumentBuffer: ID3D12Resource; ArgumentBufferOffset: UINT64; pCountBuffer: ID3D12Resource;
            CountBufferOffset: UINT64); stdcall;
    end;


    ID3D12CommandQueue = interface(ID3D12Pageable)
        ['{0ec870a6-5d7e-4c22-8cfc-5baae07616ed}']


        procedure UpdateTileMappings(pResource: ID3D12Resource; NumResourceRegions: UINT;
            pResourceRegionStartCoordinates: PD3D12_TILED_RESOURCE_COORDINATE; pResourceRegionSizes: PD3D12_TILE_REGION_SIZE;
            pHeap: ID3D12Heap; NumRanges: UINT; pRangeFlags: PD3D12_TILE_RANGE_FLAGS; pHeapRangeStartOffsets: PUINT;
            pRangeTileCounts: PUINT; Flags: TD3D12_TILE_MAPPING_FLAGS); stdcall;

        procedure CopyTileMappings(pDstResource: ID3D12Resource; const pDstRegionStartCoordinate: TD3D12_TILED_RESOURCE_COORDINATE;
            pSrcResource: ID3D12Resource; const pSrcRegionStartCoordinate: TD3D12_TILED_RESOURCE_COORDINATE;
            const pRegionSize: TD3D12_TILE_REGION_SIZE; Flags: TD3D12_TILE_MAPPING_FLAGS); stdcall;

        procedure ExecuteCommandLists(NumCommandLists: UINT; ppCommandLists: PID3D12CommandList); stdcall;

        procedure SetMarker(Metadata: UINT; pData: pointer; Size: UINT); stdcall;

        procedure BeginEvent(Metadata: UINT; pData: pointer; Size: UINT); stdcall;

        procedure EndEvent(); stdcall;

        function Signal(pFence: ID3D12Fence; Value: UINT64): HResult; stdcall;

        function Wait(pFence: ID3D12Fence; Value: UINT64): HResult; stdcall;

        function GetTimestampFrequency(out pFrequency: UINT64): HResult; stdcall;

        function GetClockCalibration(out pGpuTimestamp: UINT64; out pCpuTimestamp: UINT64): HResult; stdcall;

        function GetDesc(): TD3D12_COMMAND_QUEUE_DESC; stdcall;

    end;


    ID3D12Device = interface(ID3D12Object)
        ['{189819f1-1db6-4b57-be54-1821339b85f7}']
        function GetNodeCount(): UINT; stdcall;
        function CreateCommandQueue(const pDesc: TD3D12_COMMAND_QUEUE_DESC; const riid: TGUID; out ppCommandQueue): HResult; stdcall;
        function CreateCommandAllocator(_type: TD3D12_COMMAND_LIST_TYPE; const riid: TGUID; out ppCommandAllocator): HResult; stdcall;
        function CreateGraphicsPipelineState(const pDesc: TD3D12_GRAPHICS_PIPELINE_STATE_DESC; const riid: TGUID;
            out ppPipelineState): HResult; stdcall;
        function CreateComputePipelineState(const pDesc: TD3D12_COMPUTE_PIPELINE_STATE_DESC; const riid: TGUID;
            out ppPipelineState): HResult; stdcall;
        function CreateCommandList(nodeMask: UINT; _type: TD3D12_COMMAND_LIST_TYPE; pCommandAllocator: ID3D12CommandAllocator;
            pInitialState: ID3D12PipelineState; const riid: TGUID; out ppCommandList): HResult; stdcall;
        function CheckFeatureSupport(Feature: TD3D12_FEATURE; var pFeatureSupportData: pointer;
            FeatureSupportDataSize: UINT): HResult; stdcall;
        function CreateDescriptorHeap(const pDescriptorHeapDesc: TD3D12_DESCRIPTOR_HEAP_DESC; const riid: TGUID;
            out ppvHeap): HResult; stdcall;
        function GetDescriptorHandleIncrementSize(DescriptorHeapType: TD3D12_DESCRIPTOR_HEAP_TYPE): UINT; stdcall;
        function CreateRootSignature(nodeMask: UINT; pBlobWithRootSignature: Pointer; blobLengthInBytes: SIZE_T;
            const riid: TGUID; out ppvRootSignature): HResult; stdcall;
        procedure CreateConstantBufferView(const pDesc: TD3D12_CONSTANT_BUFFER_VIEW_DESC;
            DestDescriptor: TD3D12_CPU_DESCRIPTOR_HANDLE); stdcall;
        procedure CreateShaderResourceView(pResource: ID3D12Resource; const pDesc: TD3D12_SHADER_RESOURCE_VIEW_DESC;
            DestDescriptor: TD3D12_CPU_DESCRIPTOR_HANDLE); stdcall;
        procedure CreateUnorderedAccessView(pResource: ID3D12Resource; pCounterResource: ID3D12Resource;
            const pDesc: TD3D12_UNORDERED_ACCESS_VIEW_DESC; DestDescriptor: TD3D12_CPU_DESCRIPTOR_HANDLE); stdcall;
        procedure CreateRenderTargetView(pResource: ID3D12Resource; const pDesc: TD3D12_RENDER_TARGET_VIEW_DESC;
            DestDescriptor: TD3D12_CPU_DESCRIPTOR_HANDLE); stdcall;
        procedure CreateDepthStencilView(pResource: ID3D12Resource; const pDesc: TD3D12_DEPTH_STENCIL_VIEW_DESC;
            DestDescriptor: TD3D12_CPU_DESCRIPTOR_HANDLE); stdcall;
        procedure CreateSampler(const pDesc: TD3D12_SAMPLER_DESC; DestDescriptor: TD3D12_CPU_DESCRIPTOR_HANDLE); stdcall;
        procedure CopyDescriptors(NumDestDescriptorRanges: UINT; pDestDescriptorRangeStarts: PD3D12_CPU_DESCRIPTOR_HANDLE;
            pDestDescriptorRangeSizes: PUINT; NumSrcDescriptorRanges: UINT; pSrcDescriptorRangeStarts: PD3D12_CPU_DESCRIPTOR_HANDLE;
            pSrcDescriptorRangeSizes: PUINT; DescriptorHeapsType: TD3D12_DESCRIPTOR_HEAP_TYPE); stdcall;
        procedure CopyDescriptorsSimple(NumDescriptors: UINT; DestDescriptorRangeStart: TD3D12_CPU_DESCRIPTOR_HANDLE;
            SrcDescriptorRangeStart: TD3D12_CPU_DESCRIPTOR_HANDLE; DescriptorHeapsType: TD3D12_DESCRIPTOR_HEAP_TYPE); stdcall;
        function GetResourceAllocationInfo(visibleMask: UINT; numResourceDescs: UINT;
            pResourceDescs: PD3D12_RESOURCE_DESC): TD3D12_RESOURCE_ALLOCATION_INFO; stdcall;
        function GetCustomHeapProperties(nodeMask: UINT; heapType: TD3D12_HEAP_TYPE): TD3D12_HEAP_PROPERTIES; stdcall;
        function CreateCommittedResource(const pHeapProperties: TD3D12_HEAP_PROPERTIES; HeapFlags: TD3D12_HEAP_FLAGS;
            const pResourceDesc: TD3D12_RESOURCE_DESC; InitialResourceState: TD3D12_RESOURCE_STATES;
            const pOptimizedClearValue: TD3D12_CLEAR_VALUE; const riidResource: TGUID; out ppvResource): HResult; stdcall;
        function CreateHeap(const pDesc: TD3D12_HEAP_DESC; const riid: TGUID; out ppvHeap): HResult; stdcall;
        function CreatePlacedResource(pHeap: ID3D12Heap; HeapOffset: UINT64; const pDesc: TD3D12_RESOURCE_DESC;
            InitialState: TD3D12_RESOURCE_STATES; const pOptimizedClearValue: TD3D12_CLEAR_VALUE; const riid: TGUID;
            out ppvResource): HResult; stdcall;
        function CreateReservedResource(const pDesc: TD3D12_RESOURCE_DESC; InitialState: TD3D12_RESOURCE_STATES;
            const pOptimizedClearValue: TD3D12_CLEAR_VALUE; const riid: TGUID; out ppvResource): HResult; stdcall;
        function CreateSharedHandle(pObject: ID3D12DeviceChild; pAttributes: PSECURITY_ATTRIBUTES; Access: DWORD;
            Name: PWideChar; out pHandle: THANDLE): HResult; stdcall;
        function OpenSharedHandle(NTHandle: THANDLE; const riid: TGUID; out ppvObj): HResult; stdcall;
        function OpenSharedHandleByName(Name: PWideChar; Access: DWORD; out pNTHandle: THANDLE): HResult; stdcall;
        function MakeResident(NumObjects: UINT; ppObjects: PID3D12Pageable): HResult; stdcall;
        function Evict(NumObjects: UINT; ppObjects: PID3D12Pageable): HResult; stdcall;
        function CreateFence(InitialValue: UINT64; Flags: TD3D12_FENCE_FLAGS; const riid: TGUID; out ppFence): HResult; stdcall;
        function GetDeviceRemovedReason(): HResult; stdcall;
        procedure GetCopyableFootprints(const pResourceDesc: TD3D12_RESOURCE_DESC; FirstSubresource: UINT;
            NumSubresources: UINT; BaseOffset: UINT64; out pLayouts: PD3D12_PLACED_SUBRESOURCE_FOOTPRINT;
            out pNumRows: PUINT; out pRowSizeInBytes: PUINT64; out pTotalBytes: UINT64); stdcall;
        function CreateQueryHeap(const pDesc: TD3D12_QUERY_HEAP_DESC; const riid: TGUID; out ppvHeap): HResult; stdcall;
        function SetStablePowerState(Enable: boolean): HResult; stdcall;
        function CreateCommandSignature(const pDesc: TD3D12_COMMAND_SIGNATURE_DESC; pRootSignature: ID3D12RootSignature;
            const riid: TGUID; out ppvCommandSignature): HResult; stdcall;
        procedure GetResourceTiling(pTiledResource: ID3D12Resource; out pNumTilesForEntireResource: UINT;
            out pPackedMipDesc: TD3D12_PACKED_MIP_INFO; out pStandardTileShapeForNonPackedMips: TD3D12_TILE_SHAPE;
            var pNumSubresourceTilings: UINT; FirstSubresourceTilingToGet: UINT;
            out pSubresourceTilingsForNonPackedMips: PD3D12_SUBRESOURCE_TILING); stdcall;
        function GetAdapterLuid(): LUID; stdcall;
    end;


    TD3D12_SUBRESOURCE_DATA = record
        pData: pointer;
        RowPitch: LONG_PTR;
        SlicePitch: LONG_PTR;
    end;

    TD3D12_MEMCPY_DEST = record
        pData: pointer;
        RowPitch: SIZE_T;
        SlicePitch: SIZE_T;
    end;


function D3D12SerializeRootSignature(const pRootSignature: TD3D12_ROOT_SIGNATURE_DESC; Version: TD3D_ROOT_SIGNATURE_VERSION;
    out ppBlob: ID3DBlob; out ppErrorBlob: ID3DBlob): HResult; stdcall; external D3D12_DLL;


function D3D12CreateRootSignatureDeserializer(pSrcData: pointer; SrcDataSizeInBytes: SIZE_T;
    const pRootSignatureDeserializerInterface: TGUID; out ppRootSignatureDeserializer): HResult; stdcall; external D3D12_DLL;


///////////////////////////////////////////////////////////////////////////
// D3D12CreateDevice
// ------------------

// pAdapter
//      If NULL, D3D12CreateDevice will choose the primary adapter.
//      If non-NULL, D3D12CreateDevice will use the provided adapter.
// MinimumFeatureLevel
//      The minimum feature level required for successful device creation.
// riid
//      The interface IID of the device to be returned. Expected: ID3D12Device.
// ppDevice
//      Pointer to returned interface. May be NULL.

// Return Values
//  Any of those documented for
//          CreateDXGIFactory1
//          IDXGIFactory::EnumAdapters
//          D3D12CreateDevice

///////////////////////////////////////////////////////////////////////////


function D3D12CreateDevice(pAdapter: IUnknown; MinimumFeatureLevel: TD3D_FEATURE_LEVEL; const riid: TGUID; // Expected: ID3D12Device
    out ppDevice): HResult; stdcall; external D3D12_DLL;


function D3D12GetDebugInterface(const riid: TGUID; out ppvDebug): HResult; stdcall; external D3D12_DLL;

implementation

end.











