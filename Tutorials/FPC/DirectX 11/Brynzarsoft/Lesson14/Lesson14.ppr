program Lesson14;

{$mode delphi}{$H+}

uses
    Classes,
    SysUtils,
    Windows,
    DX12.D2D1,
    DX12.DCommon,
    DX12.D3D11,
    DX12.DWrite,
    DX12.WinCodec,
    DX12.D3D11_1,
    DX12.D3D10,
    DX12.D3DX11,
    DX12.D3DCommon,
    DX12.D3DCompiler,
    DirectX.Math,
    DX12.DXGI;

{$R *.res}


const
    Width: integer = 800;
    Height: integer = 600;

var
    //Global Declarations - Interfaces//
    SwapChain: IDXGISwapChain;
    d3d11Device: ID3D11Device;
    d3d11DevCon: ID3D11DeviceContext;
    renderTargetView: ID3D11RenderTargetView;
    cbPerObjectBuffer: ID3D11Buffer;
    CubesTexture: ID3D11ShaderResourceView;
    CubesTexSamplerState: ID3D11SamplerState;
    ///////////////**************new**************////////////////////
    Transparency: ID3D11BlendState;
    CCWcullMode: ID3D11RasterizerState;
    CWcullMode: ID3D11RasterizerState;
    noCull: ID3D11RasterizerState;
    ///////////////**************new**************////////////////////
    depthStencilView: ID3D11DepthStencilView;
    depthStencilBuffer: ID3D11Texture2D;

    squareIndexBuffer: ID3D11Buffer;
    squareVertBuffer: ID3D11Buffer;

    VS: ID3D11VertexShader;
    PS: ID3D11PixelShader;
    VS_Buffer: ID3D10Blob;
    PS_Buffer: ID3D10Blob;
    vertLayout: ID3D11InputLayout;

    FFactory: IDXGIFactory1;
    FD2DFactory1: ID2D1Factory1;
    FD2DFactory: ID2D1Factory;
    FDWriteFactory: IDWriteFactory;
    FImagingFactory: IWICImagingFactory;
    FD2DDevice: ID2D1Device;
    FD2DContext: ID2D1DeviceContext;
    FD2DRenderTarget: ID2D1RenderTarget;
    FD2DRenderTexture: ID3D11Texture2D;
    FD2DRenderRV: ID3D11ShaderResourceView;
    FD2DTargetBitmap: ID2D1Bitmap1;
    Brush: ID2D1SolidColorBrush;
    TextFormat: IDWriteTextFormat;
    d2dVertBuffer: ID3D11Buffer;
    d2dIndexBuffer: ID3D11Buffer;

    ///////////////**************new**************////////////////////
    WVP: TXMMATRIX;
    cube1World: TXMMATRIX;
    cube2World: TXMMATRIX;
    camView: TXMMATRIX;
    camProjection: TXMMATRIX;

    camPosition: TXMVECTOR;
    camTarget: TXMVECTOR;
    camUp: TXMVECTOR;
    ///////////////**************new**************////////////////////
    Rotation: TXMMATRIX;
    Scale: TXMMATRIX;
    Translation: TXMMATRIX;
    rot: single = 0.01;


    //Global Declarations - Others//
    WndClassName: LPCWSTR = 'firstwindow';
    mhwnd: THandle = 0;
    hr: HRESULT;
    nShowCmd: integer;
    mInstance: HINST;

type
    ///////////////**************new**************////////////////////
    //Vertex Structure and Vertex Layout (Input Layout)//
    TVertex = record    //Overloaded Vertex Structure
        case byte of
            0: (f: array[0..4] of single);
            1: (x, y, z: single;
                u, v: single);
            2: (pos: TXMFLOAT3;
                texCoord: TXMFLOAT2);

    end;

    ///////////////**************new**************////////////////////
    //Create effects constant buffer's structure//
    TcbPerObject = record
        WVP: TXMMATRIX;
    end;

var
    cbPerObj: TcbPerObject;
    ///////////////**************new**************////////////////////


var
    layout: array [0..1] of TD3D11_INPUT_ELEMENT_DESC = ((SemanticName: 'POSITION'; SemanticIndex: 0;
        Format: DXGI_FORMAT_R32G32B32_FLOAT; InputSlot: 0;
        AlignedByteOffset: 0; InputSlotClass: D3D11_INPUT_PER_VERTEX_DATA; InstanceDataStepRate: 0), (SemanticName: 'TEXCOORD'; SemanticIndex: 0;
        Format: DXGI_FORMAT_R32G32_FLOAT; InputSlot: 0;
        AlignedByteOffset: 12; InputSlotClass: D3D11_INPUT_PER_VERTEX_DATA; InstanceDataStepRate: 0));
    numElements: UINT = Length(layout);
    ///////////////**************new**************////////////////////



    //Function Prototypes//

    function WndProc(hWnd: THandle; msg: UINT; wParam: WPARAM; lParam: LPARAM): LRESULT; stdcall;
    begin
        case (msg) of
            WM_KEYDOWN:
            begin
                if (wParam = VK_ESCAPE) then
                begin
                    DestroyWindow(hwnd);
                end;
                Result := 0;
            end;

            WM_DESTROY:
            begin
                PostQuitMessage(0);
                Result := 0;
            end;
            else
                Result := DefWindowProcW(hwnd, msg, wParam, lParam);
        end;
    end;



    function InitializeDirect3d11App(): boolean;
    var
        bufferDesc: TDXGI_MODE_DESC;
        swapChainDesc: TDXGI_SWAP_CHAIN_DESC;
        BackBuffer: ID3D11Texture2D;
        featureLevel: TD3D_FEATURE_LEVEL;
        depthStencilDesc: TD3D11_TEXTURE2D_DESC;
        lDXGIDevice: IDXGIDevice;
        d3d11Device1: ID3D11Device1;
        lTexDesc: TD3D11_TEXTURE2D_DESC;
        lDxgiSurface: IDXGISurface;
        lBitmapProperties: TD2D1_BITMAP_PROPERTIES1;
        lDesc: TDXGI_SURFACE_DESC;
        lFactoryOptions: TD2D1_FACTORY_OPTIONS;
        lCreateFlag: UINT;
    begin
        //Describe our SwapChain Buffer
        ZeroMemory(@bufferDesc, sizeof(TDXGI_MODE_DESC));

        bufferDesc.Width := Width;
        bufferDesc.Height := Height;
        bufferDesc.RefreshRate.Numerator := 60;
        bufferDesc.RefreshRate.Denominator := 1;
        bufferDesc.Format := DXGI_FORMAT_B8G8R8A8_UNORM;
        bufferDesc.ScanlineOrdering := DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED;
        bufferDesc.Scaling := DXGI_MODE_SCALING_UNSPECIFIED;

        //Describe our SwapChain


        ZeroMemory(@swapChainDesc, sizeof(TDXGI_SWAP_CHAIN_DESC));
        swapChainDesc.BufferDesc := bufferDesc;
        swapChainDesc.SampleDesc.Count := 1;
        swapChainDesc.SampleDesc.Quality := 0;
        swapChainDesc.BufferUsage := DXGI_USAGE_RENDER_TARGET_OUTPUT;
        swapChainDesc.BufferCount := 1;
        swapChainDesc.OutputWindow := mhwnd;
        swapChainDesc.Windowed := True;
        swapChainDesc.SwapEffect := DXGI_SWAP_EFFECT_DISCARD;


        //Create our SwapChain
        lCreateFlag := Ord(D3D11_CREATE_DEVICE_BGRA_SUPPORT);
        hr := D3D11CreateDeviceAndSwapChain(nil, D3D_DRIVER_TYPE_HARDWARE, 0, lCreateFlag, nil, 0, D3D11_SDK_VERSION,
            @swapChainDesc, SwapChain, d3d11Device, featureLevel, d3d11DevCon);

        //Create our BackBuffer

        hr := SwapChain.GetBuffer(0, IID_ID3D11Texture2D, BackBuffer);

        //Create our Render Target
        hr := d3d11Device.CreateRenderTargetView(BackBuffer, nil, renderTargetView);
        BackBuffer := nil;


        ///////////////**************new**************////////////////////
        // Direct2D
        lFactoryOptions.DebugLevel := D2D1_DEBUG_LEVEL_NONE;//  D2D1_DEBUG_LEVEL_INFORMATION;
        hr := D2D1CreateFactory(D2D1_FACTORY_TYPE_MULTI_THREADED, ID2D1Factory1, @lFactoryOptions, FD2DFactory1);
        hr := DWriteCreateFactory(DWRITE_FACTORY_TYPE_SHARED, IDWriteFactory, IUnknown(FDWriteFactory));
        hr := d3d11Device.QueryInterface(IID_ID3D11Device1, d3d11Device1);
        hr := d3d11Device1.QueryInterface(IDXGIDevice, lDXGIDevice);
        hr := FD2DFactory1.CreateDevice(lDXGIDevice, FD2DDevice);
        hr := FD2DDevice.CreateDeviceContext(D2D1_DEVICE_CONTEXT_OPTIONS_NONE, FD2DContext);
        hr := FD2DContext.QueryInterface(ID2D1RenderTarget, FD2DRenderTarget);

        with lTexDesc do
        begin
            ArraySize := 1;
            BindFlags := Ord(D3D11_BIND_RENDER_TARGET) or Ord(D3D11_BIND_SHADER_RESOURCE);
            CPUAccessFlags := 0;
            Format := DXGI_FORMAT_B8G8R8A8_UNORM;
            Width := bufferDesc.Width;
            Height := bufferDesc.Height;
            MipLevels := 1;
            MiscFlags := 0;
            SampleDesc.Count := 1;
            SampleDesc.Quality := 0;
            Usage := D3D11_USAGE_DEFAULT;
        end;
        hr := D3D11Device.CreateTexture2D(lTexDesc, nil, FD2DRenderTexture);
        hr := D3D11Device.CreateShaderResourceView(FD2DRenderTexture, nil, FD2DRenderRV);
        hr := FD2DRenderTexture.QueryInterface(IDXGISurface, lDxgiSurface);
        with lBitmapProperties do
        begin
            bitmapOptions := D2D1_BITMAP_OPTIONS_TARGET;
            pixelFormat.Format := DXGI_FORMAT_B8G8R8A8_UNORM;
            pixelFormat.AlphaMode := D2D1_ALPHA_MODE_PREMULTIPLIED;
            dpiX := 96;
            dpiY := 96;
            colorContext := nil;
        end;
        hr := FD2DContext.CreateBitmapFromDxgiSurface(lDxgiSurface, lbitmapProperties { nil}, FD2DTargetBitmap);

        hr := FDWriteFactory.CreateTextFormat('Script', nil, DWRITE_FONT_WEIGHT_REGULAR, DWRITE_FONT_STYLE_NORMAL,
            DWRITE_FONT_STRETCH_NORMAL, 24.0, 'en-us', TextFormat);

        hr := TextFormat.SetTextAlignment(DWRITE_TEXT_ALIGNMENT_LEADING);
        hr := TextFormat.SetParagraphAlignment(DWRITE_PARAGRAPH_ALIGNMENT_NEAR);
        // Create a solid color brush to draw something with
        hr := FD2DRenderTarget.CreateSolidColorBrush(ColorF(1.0, 1.0, 0.0, 1.0), &Brush);


        depthStencilDesc.Width := Width;
        depthStencilDesc.Height := Height;
        depthStencilDesc.MipLevels := 1;
        depthStencilDesc.ArraySize := 1;
        depthStencilDesc.Format := DXGI_FORMAT_D24_UNORM_S8_UINT;
        depthStencilDesc.SampleDesc.Count := 1;
        depthStencilDesc.SampleDesc.Quality := 0;
        depthStencilDesc.Usage := D3D11_USAGE_DEFAULT;
        depthStencilDesc.BindFlags := Ord(D3D11_BIND_DEPTH_STENCIL);
        depthStencilDesc.CPUAccessFlags := 0;
        depthStencilDesc.MiscFlags := 0;

        //Create the Depth/Stencil View
        d3d11Device.CreateTexture2D(depthStencilDesc, nil, depthStencilBuffer);
        d3d11Device.CreateDepthStencilView(depthStencilBuffer, nil, depthStencilView);

        //Set our Render Target
        d3d11DevCon.OMSetRenderTargets(1, @renderTargetView, depthStencilView);
        ///////////////**************new**************////////////////////


        Result := True;
    end;



    procedure CleanUp();
    begin
        //Release the COM Objects we created
        SwapChain := nil;
        d3d11Device := nil;
        d3d11DevCon := nil;
        renderTargetView := nil;
        cbPerObjectBuffer := nil;

        Transparency := nil;
        CCWcullMode := nil;
        CWcullMode := nil;
        noCull := nil;

        depthStencilView := nil;
        depthStencilBuffer := nil;

        squareVertBuffer := nil;
        squareIndexBuffer := nil;

        VS := nil;
        PS := nil;
        VS_Buffer := nil;
        PS_Buffer := nil;
        vertLayout := nil;

    end;


    ///////////////**************new**************////////////////////
    procedure InitD2DScreenTexture();
    const
        //Create the vertex buffer
        v: array[0..3] of TVertex =
            (
            // Front Face
            (f: (-1.0, -1.0, -1.0, 0.0, 1.0)),
            (f: (-1.0, 1.0, -1.0, 0.0, 0.0)),
            (f: (1.0, 1.0, -1.0, 1.0, 0.0)),
            (f: (1.0, -1.0, -1.0, 1.0, 1.0)));

        indices: array[0..5] of DWORD = (
            // Front Face
            0, 1, 2,
            0, 2, 3);
    var
        indexBufferDesc: TD3D11_BUFFER_DESC;
        iinitData: TD3D11_SUBRESOURCE_DATA;
        vertexBufferDesc: TD3D11_BUFFER_DESC;
        vertexBufferData: TD3D11_SUBRESOURCE_DATA;
    begin

        ZeroMemory(@indexBufferDesc, sizeof(indexBufferDesc));

        indexBufferDesc.Usage := D3D11_USAGE_DEFAULT;
        indexBufferDesc.ByteWidth := sizeof(DWORD) * 2 * 3;
        indexBufferDesc.BindFlags := Ord(D3D11_BIND_INDEX_BUFFER);
        indexBufferDesc.CPUAccessFlags := 0;
        indexBufferDesc.MiscFlags := 0;



        iinitData.pSysMem := @indices[0];
        d3d11Device.CreateBuffer(indexBufferDesc, @iinitData, d2dIndexBuffer);



        ZeroMemory(@vertexBufferDesc, sizeof(vertexBufferDesc));

        vertexBufferDesc.Usage := D3D11_USAGE_DEFAULT;
        vertexBufferDesc.ByteWidth := sizeof(TVertex) * 4;
        vertexBufferDesc.BindFlags := Ord(D3D11_BIND_VERTEX_BUFFER);
        vertexBufferDesc.CPUAccessFlags := 0;
        vertexBufferDesc.MiscFlags := 0;



        ZeroMemory(@vertexBufferData, sizeof(vertexBufferData));
        vertexBufferData.pSysMem := @v[0];
        hr := d3d11Device.CreateBuffer(vertexBufferDesc, @vertexBufferData, d2dVertBuffer);

    end;
    ///////////////**************new**************////////////////////



    function InitScene(): boolean;
    var
        pError: ID3DBlob;
        vertexBufferDesc: TD3D11_BUFFER_DESC;
        indexBufferDesc: TD3D11_BUFFER_DESC;
        vertexBufferData: TD3D11_SUBRESOURCE_DATA;
        iinitData: TD3D11_SUBRESOURCE_DATA;
        stride: uint32;
        offset: uint32;
        viewport: TD3D11_VIEWPORT;
        cbbd: TD3D11_BUFFER_DESC;
        sampDesc: TD3D11_SAMPLER_DESC;
        blendDesc: TD3D11_BLEND_DESC;
        rtbd: TD3D11_RENDER_TARGET_BLEND_DESC;
        cmdesc: TD3D11_RASTERIZER_DESC;
        rastDesc: TD3D11_RASTERIZER_DESC;

        //Create the vertex buffer
        v: array [0..23] of TVertex = (// Front Face
            (f: (-1.0, -1.0, -1.0, 0.0, 1.0)), (f: (-1.0, 1.0, -1.0, 0.0, 0.0)), (f: (1.0, 1.0, -1.0, 1.0, 0.0)), (f: (1.0, -1.0, -1.0, 1.0, 1.0)),

            // Back Face
            (f: (-1.0, -1.0, 1.0, 1.0, 1.0)), (f: (1.0, -1.0, 1.0, 0.0, 1.0)), (f: (1.0, 1.0, 1.0, 0.0, 0.0)), (f: (-1.0, 1.0, 1.0, 1.0, 0.0)),

            // Top Face
            (f: (-1.0, 1.0, -1.0, 0.0, 1.0)), (f: (-1.0, 1.0, 1.0, 0.0, 0.0)), (f: (1.0, 1.0, 1.0, 1.0, 0.0)), (f: (1.0, 1.0, -1.0, 1.0, 1.0)),

            // Bottom Face
            (f: (-1.0, -1.0, -1.0, 1.0, 1.0)), (f: (1.0, -1.0, -1.0, 0.0, 1.0)), (f: (1.0, -1.0, 1.0, 0.0, 0.0)), (f: (-1.0, -1.0, 1.0, 1.0, 0.0)),

            // Left Face
            (f: (-1.0, -1.0, 1.0, 0.0, 1.0)), (f: (-1.0, 1.0, 1.0, 0.0, 0.0)), (f: (-1.0, 1.0, -1.0, 1.0, 0.0)), (f: (-1.0, -1.0, -1.0, 1.0, 1.0)),

            // Right Face
            (f: (1.0, -1.0, -1.0, 0.0, 1.0)), (f: (1.0, 1.0, -1.0, 0.0, 0.0)), (f: (1.0, 1.0, 1.0, 1.0, 0.0)), (f: (1.0, -1.0, 1.0, 1.0, 1.0)));

        indices: array[0..35] of DWORD = (// front face
            // Front Face
            0, 1, 2, 0, 2, 3,

            // Back Face
            4, 5, 6, 4, 6, 7,

            // Top Face
            8, 9, 10, 8, 10, 11,

            // Bottom Face
            12, 13, 14, 12, 14, 15,

            // Left Face
            16, 17, 18, 16, 18, 19,

            // Right Face
            20, 21, 22, 20, 22, 23);
    begin
        ///////////////**************new**************////////////////////
        InitD2DScreenTexture();
        ///////////////**************new**************////////////////////

        //Compile Shaders from shader file
        hr := D3DCompileFromFile('Effects.fx', nil, nil, 'VS', 'vs_4_0', 0, 0, VS_Buffer, pError);
        hr := D3DCompileFromFile('Effects.fx', nil, nil, 'PS', 'ps_4_0', 0, 0, PS_Buffer, pError);
        //Create the Shader Objects
        hr := d3d11Device.CreateVertexShader(VS_Buffer.GetBufferPointer(), VS_Buffer.GetBufferSize(), nil, VS);
        hr := d3d11Device.CreatePixelShader(PS_Buffer.GetBufferPointer(), PS_Buffer.GetBufferSize(), nil, PS);

        //Set Vertex and Pixel Shaders
        d3d11DevCon.VSSetShader(VS, nil, 0);
        d3d11DevCon.PSSetShader(PS, nil, 0);



        ZeroMemory(@indexBufferDesc, sizeof(indexBufferDesc));

        indexBufferDesc.Usage := D3D11_USAGE_DEFAULT;
        indexBufferDesc.ByteWidth := sizeof(DWORD) * 12 * 3;
        indexBufferDesc.BindFlags := Ord(D3D11_BIND_INDEX_BUFFER);
        indexBufferDesc.CPUAccessFlags := 0;
        indexBufferDesc.MiscFlags := 0;



        iinitData.pSysMem := @indices[0];
        d3d11Device.CreateBuffer(indexBufferDesc, @iinitData, squareIndexBuffer);


        ZeroMemory(@vertexBufferDesc, sizeof(vertexBufferDesc));

        vertexBufferDesc.Usage := D3D11_USAGE_DEFAULT;
        vertexBufferDesc.ByteWidth := sizeof(TVertex) * 24;
        vertexBufferDesc.BindFlags := Ord(D3D11_BIND_VERTEX_BUFFER);
        vertexBufferDesc.CPUAccessFlags := 0;
        vertexBufferDesc.MiscFlags := 0;



        ZeroMemory(@vertexBufferData, sizeof(vertexBufferData));
        vertexBufferData.pSysMem := @v[0];
        hr := d3d11Device.CreateBuffer(vertexBufferDesc, @vertexBufferData, squareVertBuffer);


        //Create the Input Layout
        d3d11Device.CreateInputLayout(layout, numElements, VS_Buffer.GetBufferPointer(),
            VS_Buffer.GetBufferSize(), vertLayout);

        //Set the Input Layout
        d3d11DevCon.IASetInputLayout(vertLayout);

        //Set Primitive Topology
        d3d11DevCon.IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST);

        //Create the Viewport

        ZeroMemory(@viewport, sizeof(TD3D11_VIEWPORT));

        viewport.TopLeftX := 0;
        viewport.TopLeftY := 0;
        viewport.Width := Width;
        viewport.Height := Height;
        ///////////////**************new**************////////////////////
        viewport.MinDepth := 0.0;
        viewport.MaxDepth := 1.0;
        ///////////////**************new**************////////////////////


        //Set the Viewport
        d3d11DevCon.RSSetViewports(1, @viewport);


        ///////////////**************new**************////////////////////
        //Create the buffer to send to the cbuffer in effect file

        ZeroMemory(@cbbd, sizeof(TD3D11_BUFFER_DESC));

        cbbd.Usage := D3D11_USAGE_DEFAULT;
        cbbd.ByteWidth := sizeof(TcbPerObject);
        cbbd.BindFlags := Ord(D3D11_BIND_CONSTANT_BUFFER);
        cbbd.CPUAccessFlags := 0;
        cbbd.MiscFlags := 0;

        hr := d3d11Device.CreateBuffer(cbbd, nil, cbPerObjectBuffer);

        //Camera information
        camPosition := XMVectorSet(0.0, 3.0, -8.0, 0.0);
        camTarget := XMVectorSet(0.0, 0.0, 0.0, 0.0);
        camUp := XMVectorSet(0.0, 1.0, 0.0, 0.0);

        //Set the View matrix
        camView := XMMatrixLookAtLH(camPosition, camTarget, camUp);

        //Set the Projection matrix
        camProjection := XMMatrixPerspectiveFovLH(0.4 * 3.14, Width / Height, 1.0, 1000.0);

        ///////////////**************new**************////////////////////

        hr := D3DX11CreateShaderResourceViewFromFileW(d3d11Device, 'Cage.png', nil, nil, CubesTexture, nil);

        // Describe the Sample State

        ZeroMemory(@sampDesc, sizeof(sampDesc));
        sampDesc.Filter := D3D11_FILTER_MIN_MAG_MIP_LINEAR;
        sampDesc.AddressU := D3D11_TEXTURE_ADDRESS_WRAP;
        sampDesc.AddressV := D3D11_TEXTURE_ADDRESS_WRAP;
        sampDesc.AddressW := D3D11_TEXTURE_ADDRESS_WRAP;
        sampDesc.ComparisonFunc := D3D11_COMPARISON_NEVER;
        sampDesc.MinLOD := 0;
        sampDesc.MaxLOD := D3D11_FLOAT32_MAX;

        //Create the Sample State
        hr := d3d11Device.CreateSamplerState(sampDesc, CubesTexSamplerState);

        ///////////////**************new**************////////////////////
        //Define the Blending Equation

        ZeroMemory(@blendDesc, sizeof(blendDesc));


        ZeroMemory(@rtbd, sizeof(rtbd));

        rtbd.BlendEnable := True;
        rtbd.SrcBlend := D3D11_BLEND_SRC_COLOR;
        rtbd.DestBlend := D3D11_BLEND_INV_SRC_ALPHA;
        rtbd.BlendOp := D3D11_BLEND_OP_ADD;
        rtbd.SrcBlendAlpha := D3D11_BLEND_ONE;
        rtbd.DestBlendAlpha := D3D11_BLEND_ZERO;
        rtbd.BlendOpAlpha := D3D11_BLEND_OP_ADD;
        rtbd.RenderTargetWriteMask := Ord(D3D10_COLOR_WRITE_ENABLE_ALL);

        blendDesc.AlphaToCoverageEnable := False;
        blendDesc.RenderTarget[0] := rtbd;


        hr := D3DX11CreateShaderResourceViewFromFileW(d3d11Device, 'braynzar.jpg', nil, nil, CubesTexture, nil);

        // Describe the Sample State

        ZeroMemory(@sampDesc, sizeof(sampDesc));
        sampDesc.Filter := D3D11_FILTER_MIN_MAG_MIP_LINEAR;
        sampDesc.AddressU := D3D11_TEXTURE_ADDRESS_WRAP;
        sampDesc.AddressV := D3D11_TEXTURE_ADDRESS_WRAP;
        sampDesc.AddressW := D3D11_TEXTURE_ADDRESS_WRAP;
        sampDesc.ComparisonFunc := D3D11_COMPARISON_NEVER;
        sampDesc.MinLOD := 0;
        sampDesc.MaxLOD := D3D11_FLOAT32_MAX;

        //Create the Sample State
        hr := d3d11Device.CreateSamplerState(sampDesc, CubesTexSamplerState);



        d3d11Device.CreateBlendState(blendDesc, Transparency);

        //Create the Counter Clockwise and Clockwise Culling States

        ZeroMemory(@cmdesc, sizeof(TD3D11_RASTERIZER_DESC));

        cmdesc.FillMode := D3D11_FILL_SOLID;
        cmdesc.CullMode := D3D11_CULL_BACK;

        cmdesc.FrontCounterClockwise := True;
        hr := d3d11Device.CreateRasterizerState(cmdesc, CCWcullMode);

        cmdesc.FrontCounterClockwise := False;
        hr := d3d11Device.CreateRasterizerState(cmdesc, CWcullMode);


        ZeroMemory(@rastDesc, sizeof(TD3D11_RASTERIZER_DESC));
        rastDesc.FillMode := D3D11_FILL_SOLID;
        rastDesc.CullMode := D3D11_CULL_NONE;

        d3d11Device.CreateRasterizerState(rastDesc, noCull);


        Result := True;
    end;



    procedure UpdateScene();
    var
        rotaxis: TXMVECTOR;
    begin
        //Keep the cubes rotating
        rot := rot + 0.0005;
        if (rot > 6.26) then
            rot := rot - 6.26;

        //Reset cube1World
        cube1World := XMMatrixIdentity();

        //Define cube1's world space matrix
        rotaxis := XMVectorSet(0.0, 1.0, 0.0, 0.0);
        Rotation := XMMatrixRotationAxis(rotaxis, rot);
        Translation := XMMatrixTranslation(0.0, 0.0, 4.0);

        //Set cube1's world space using the transformations
        cube1World := Translation * Rotation;

        //Reset cube2World
        cube2World := XMMatrixIdentity();

        //Define cube2's world space matrix
        Rotation := XMMatrixRotationAxis(rotaxis, -rot);
        Scale := XMMatrixScaling(1.3, 1.3, 1.3);

        //Set cube2's world space matrix
        cube2World := Rotation * Scale;
    end;


    ///////////////**************new**************////////////////////
    procedure RenderText(Text: WideString);
    var
        stride, offset: UINT;
        layoutRect: TD2D1_RECT_F;
    begin
        //Draw D2D content
        FD2DContext.SetTarget(FD2DTargetBitmap);
        FD2DRenderTarget.BeginDraw();

        //Clear D2D Background
        FD2DRenderTarget.Clear(ColorF(0.0, 0.0, 0.0, 0.0));

        //Create our string

        //Set the brush color D2D will use to draw with
        Brush.SetColor(ColorF(1.0, 1.0, 1.0, 1.0));

        //Create the D2D Render Area
        layoutRect := DX12.D2D1.RectF(0, 0, Width, Height);

        //Draw the Text
        FD2DRenderTarget.DrawText(
            pWideChar(Text),
            Length(Text),
            TextFormat,
            layoutRect,
            Brush
            );

        FD2DRenderTarget.EndDraw();


        //Use the shader resource representing the direct2d render target
        //to texture a square which is rendered in screen space so it
        //overlays on top of our entire scene. We use alpha blending so
        //that the entire background of the D2D render target is "invisible",
        //And only the stuff we draw with D2D will be visible (the text)

        //Set the blend state for D2D render target texture objects
        d3d11DevCon.OMSetBlendState(Transparency, TFloatArray4(nil^), $ffffffff);

        //Set the d2d Index buffer
        d3d11DevCon.IASetIndexBuffer(d2dIndexBuffer, DXGI_FORMAT_R32_UINT, 0);
        //Set the d2d vertex buffer
        stride := sizeof(TVertex);
        offset := 0;
        d3d11DevCon.IASetVertexBuffers(0, 1, @d2dVertBuffer, @stride, @offset);

        WVP := XMMatrixIdentity();
        cbPerObj.WVP := XMMatrixTranspose(WVP);
        d3d11DevCon.UpdateSubresource(cbPerObjectBuffer, 0, nil, @cbPerObj, 0, 0);
        d3d11DevCon.VSSetConstantBuffers(0, 1, @cbPerObjectBuffer);
        d3d11DevCon.PSSetShaderResources(0, 1, @FD2DRenderRV);
        d3d11DevCon.PSSetSamplers(0, 1, @CubesTexSamplerState);

        d3d11DevCon.RSSetState(CWcullMode);
        //Draw the second cube
        d3d11DevCon.DrawIndexed(6, 0, 0);
    end;
    ///////////////**************new**************////////////////////


    procedure DrawScene();
    var
        bgColor: TFloatArray4 = (0.0, 0.0, 0.0, 1.0);
        blendFactor: TFloatArray4 = (0.75, 0.75, 0.75, 1.0);
        cubePos: TXMVECTOR;
        distX, distY, distZ, cube1Dist, cube2Dist: single;
        tempMatrix: TXMMATRIX;
        stride, offset: UINT;
    begin

        //Clear our render target and depth/stencil view

        d3d11DevCon.ClearRenderTargetView(renderTargetView, bgColor);
        d3d11DevCon.ClearDepthStencilView(depthStencilView, Ord(D3D11_CLEAR_DEPTH) or Ord(D3D11_CLEAR_STENCIL), 1.0, 0);

        //Set our Render Target
        d3d11DevCon.OMSetRenderTargets(1, @renderTargetView, depthStencilView);

        //Set the default blend state (no blending) for opaque objects
        d3d11DevCon.OMSetBlendState(nil, TFloatArray4(nil^), $ffffffff);

        ///////////////**************new**************////////////////////
        //Set the cubes index buffer
        d3d11DevCon.IASetIndexBuffer(squareIndexBuffer, DXGI_FORMAT_R32_UINT, 0);
        //Set the cubes vertex buffer
        stride := sizeof(TVertex);
        offset := 0;
        d3d11DevCon.IASetVertexBuffers(0, 1, @squareVertBuffer, @stride, @offset);


        //Set the WVP matrix and send it to the constant buffer in effect file
        WVP := cube1World * camView * camProjection;
        cbPerObj.WVP := XMMatrixTranspose(WVP);
        d3d11DevCon.UpdateSubresource(cbPerObjectBuffer, 0, nil, @cbPerObj, 0, 0);
        d3d11DevCon.VSSetConstantBuffers(0, 1, @cbPerObjectBuffer);
        d3d11DevCon.PSSetShaderResources(0, 1, @CubesTexture);
        d3d11DevCon.PSSetSamplers(0, 1, @CubesTexSamplerState);

         d3d11DevCon.RSSetState(CWcullMode);
        d3d11DevCon.DrawIndexed(36, 0, 0);


        WVP := cube2World * camView * camProjection;

        cbPerObj.WVP := XMMatrixTranspose(WVP);

        d3d11DevCon.UpdateSubresource(cbPerObjectBuffer, 0, nil, @cbPerObj, 0, 0);

        d3d11DevCon.VSSetConstantBuffers(0, 1, @cbPerObjectBuffer);
        d3d11DevCon.PSSetShaderResources(0, 1, @CubesTexture);
        d3d11DevCon.PSSetSamplers(0, 1, @CubesTexSamplerState);

        d3d11DevCon.RSSetState(CWcullMode);
        d3d11DevCon.DrawIndexed(36, 0, 0);

        d3d11DevCon.RSSetState(CWcullMode);
        RenderText('Hello World');

        //Present the backbuffer to the screen
        SwapChain.Present(0, 0);
    end;



    function InitializeWindow(ShowWnd: integer; Width, Height: integer; windowed: boolean): boolean;
    var
        wc: TWNDCLASSEXW;
    begin

        wc.style := CS_HREDRAW or CS_VREDRAW;
        wc.lpfnWndProc := @WndProc;
        wc.cbClsExtra := 0;
        wc.cbWndExtra := 0;
        wc.hInstance := minstance;
        wc.hIcon := LoadIcon(0, IDI_WINLOGO);
        wc.hIconSm := wc.hIcon;
        wc.hCursor := LoadCursor(0, IDC_ARROW);
        wc.hbrBackground := HBRUSH(GetStockObject(BLACK_BRUSH));
        wc.lpszMenuName := nil;
        wc.lpszClassName := 'firstwindow';
        wc.cbSize := sizeof(TWNDCLASSEXW);

        if (RegisterClassExW(wc) = 0) then
        begin
            MessageBoxW(0, 'Error registering class',
                'Error', MB_OK or MB_ICONERROR);
            Result := False;
            Exit;
        end;

        mhwnd := CreateWindowExW(WS_EX_APPWINDOW, 'firstwindow', 'Lesson 4 - Begin Drawing', WS_CLIPSIBLINGS or
            WS_CLIPCHILDREN or WS_POPUP or WS_CAPTION, 0, 0, Width, Height, 0, 0, mInstance, nil);

        if (mhwnd = 0) then
        begin
            MessageBoxW(0, 'Error creating window',
                'Error', MB_OK or MB_ICONERROR);
            Result := False;
            Exit;
        end;

        ShowWindow(mhwnd, SW_SHOW);
        SetForegroundWindow(mhwnd);
        SetFocus(mhwnd);
        UpdateWindow(mhwnd);

        Result := True;
    end;



    function messageloop(): integer;
    var
        msg: TMSG;
    begin
        ZeroMemory(@msg, sizeof(TMSG));
        while (True) do
        begin

            if (PeekMessage(msg, 0, 0, 0, PM_REMOVE)) then
            begin
                if (msg.message = WM_QUIT) then
                    break;
                TranslateMessage(msg);
                DispatchMessage(msg);
            end
            else
            begin
                // run game code
                UpdateScene();
                DrawScene();
            end;
        end;
        Result := msg.wParam;
    end;




begin
    // Get the instance of this application.
    mInstance := GetModuleHandle(nil);

    if (not InitializeWindow(nShowCmd, Width, Height, True)) then
    begin
        MessageBoxW(0, 'Window Initialization - Failed',
            'Error', MB_OK);
        Exit;
    end;

    if (not InitializeDirect3d11App()) then    //Initialize Direct3D
    begin
        MessageBoxW(0, 'Direct3D Initialization - Failed',
            'Error', MB_OK);
        Exit;
    end;

    if (not InitScene()) then    //Initialize our scene
    begin
        MessageBox(0, 'Scene Initialization - Failed',
            'Error', MB_OK);
        Exit;
    end;

    messageloop();

    CleanUp();
end.
